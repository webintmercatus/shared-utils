{"version":3,"file":"index.cjs","sources":["../src/constants/CATEGORIES.ts","../src/fetchConfigs/transformationOptions.ts","../src/sortObjectAlphabetically.ts","../src/fetchConfigs/transformToNested.ts","../src/fetchConfigs/transformResponse.ts","../src/fetchConfigs/transformToConfigValues.ts","../src/getDiff.ts","../src/parseSource/parseSource.ts","../src/logMemoryUsage.ts","../src/parseSource/parseSourceConfigs.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum ConfigCategory {\n  Setting = `setting`,\n  Translation = `translation`,\n  UI = `ui`,\n  Feature = `feature`\n}\n\nexport enum ConfigCategoryPlurals {\n  Setting = `settings`,\n  Translation = `translations`,\n  UI = `ui`,\n  Feature = `features`\n}\n\n/* eslint-enable: no-unused-vars */\nconst CATEGORIES = {\n  [ConfigCategory.Setting]: {\n    plural: ConfigCategoryPlurals.Setting,\n    label: `Setting`,\n    labelPlural: `Settings`,\n    order: 1,\n  },\n  [ConfigCategory.Translation]: {\n    plural: ConfigCategoryPlurals.Translation,\n    label: `Translation`,\n    labelPlural: `Translations`,\n    order: 2,\n  },\n  [ConfigCategory.UI]: {\n    plural: ConfigCategoryPlurals.UI,\n    label: `UI`,\n    labelPlural: `UI`,\n    order: 3,\n  },\n  [ConfigCategory.Feature]: {\n    plural: ConfigCategoryPlurals.Feature,\n    label: `Feature`,\n    labelPlural: `Features`,\n    order: 4,\n  },\n}\n\nexport { CATEGORIES }\n","import lodash from 'lodash'\n\nconst { assign, mapValues } = lodash\n\nexport type TransformationOptions = {\n  nested: boolean,\n  categorized: boolean,\n  sort: boolean,\n}\n\nconst getTransformationOptions = (options: Partial<TransformationOptions> = {}): TransformationOptions => {\n\n  options = mapValues(options, () => true)\n\n  const opts: TransformationOptions = {\n    nested: false,\n    categorized: false,\n    sort: false, // TODO: In EDGE, we may want to be more flexible and allow a string value for `sort` to support different sorting methods\n  }\n\n  return assign(opts, options)\n}\n\nexport { getTransformationOptions }\n","import lodash from 'lodash'\n\nconst { fromPairs, sortBy, toPairs } = lodash\n\nconst sortObjectAlphabetically = object => {\n  return fromPairs(sortBy(toPairs(object), 0)) as object\n}\n\nexport { sortObjectAlphabetically }\n","import lodash from 'lodash'\n\nconst { each, setWith } = lodash\n\nconst transformToNested = object => {\n\n  const transformed = {}\n\n  each(object, (value, key) => {\n    setWith(transformed, key, value, Object)\n  })\n\n  return transformed\n}\n\nexport { transformToNested }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { sortObjectAlphabetically } from '../sortObjectAlphabetically'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get } = lodash\n\nconst helpTransformResponse = (response, callback = null) => {\n\n  const transformed = {}\n\n  each(response, (value, key) => {\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, value)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    transformed[key] = value\n  })\n\n  return transformed\n}\n\nconst transformResponse = (response, opts = {}, configs = null) => {\n\n  const options = getTransformationOptions(opts)\n\n  let transformed = response\n\n  if (options.sort) {\n    transformed = sortObjectAlphabetically(transformed)\n  }\n\n  if (options.categorized) {\n\n    transformed = helpTransformResponse(transformed, key => {\n\n      const config = get(configs, key)\n\n      if (config) {\n        key = `${CATEGORIES[config.category].plural}.${key}`\n      }\n\n      return {\n        key,\n      }\n    })\n  }\n\n  if (options.nested) {\n    return transformToNested(transformed)\n  }\n\n  return transformed\n}\n\nexport { transformResponse }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, has } = lodash\n\nconst transformFromConfigsToResponse = (configs, callback = null, defaultsOnly = false) => {\n\n  const response = {}\n\n  each(configs, (config, key) => {\n    // TODO: Figure out why configs have value properties when a configuration is saved but not published\n    let value = has(config, `value`) && !defaultsOnly ? config.value : config.default\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, config)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    response[key] = value\n  })\n\n  return response\n}\n\nconst transformToConfigValues = (configs, opts = {}, defaultsOnly = false) => {\n\n  const options = getTransformationOptions(opts)\n\n  const response = transformFromConfigsToResponse(configs, (key, config) => {\n\n    key = options.categorized ? `${CATEGORIES[config.category].plural}.${key}` : key\n\n    return {\n      key,\n    }\n  }, defaultsOnly)\n\n  if (options.nested) {\n    return transformToNested(response)\n  }\n\n  return response\n}\n\nexport { transformFromConfigsToResponse, transformToConfigValues }\n","import lodash from 'lodash'\n\nconst { differenceWith, each, fromPairs, has, isEqual, pickBy, toPairs } = lodash\n\nconst getDiffByStatus = (object1, object2): object => {\n  const changes = fromPairs(differenceWith(toPairs(object2), toPairs(object1), isEqual)) as object\n\n  const added = pickBy(changes, (value, key) => {\n    return !has(object1, key)\n  })\n  \n  const changed = pickBy(changes, (value, key) => {\n    return has(object1, key)\n  })\n\n  const reverseChanges = fromPairs(differenceWith(toPairs(object1), toPairs(object2), isEqual)) as object\n\n  const removed = pickBy(reverseChanges, (value, key) => {\n    return !has(object2, key)\n  })\n\n  return { added: added, changed: changed, removed: removed }\n}\n\nconst getDiff = (object1, object2) => {\n  const diffByStatus = getDiffByStatus(object1, object2)\n\n  const diff = {}\n\n  each (diffByStatus, (value, statusKey) => {\n    each(diffByStatus[statusKey], (value, key) => {\n      diff[key] = {\n        value: value,\n        status: statusKey,\n        previous: object1[key],\n      }\n    })\n  })\n\n  return diff\n}\n\nexport { getDiff, getDiffByStatus }\n","import lodash from 'lodash'\n\nimport type { Component, ComponentOptions, Components, Config, ConfigObject, Configs, Onboarder, Onboarders, OnboarderTabs, Source, StandardizedConfigs } from '../types'\n\nconst { assign, each, get, has, includes, isObject, kebabCase, last, mapKeys, mapValues, merge, set, size, split, startCase, unset } = lodash\n\nexport type SourceConfigs = {\n  getComponents?: () => Promise<Components>,\n  getOnboarders?: () => Promise<Onboarder>,\n  getConfigs?: () => Promise<Configs>,\n  getLabel?: () => string | Promise<string | undefined>,\n  getName?: () => string | Promise<string | undefined>,\n  source?: string\n}\n\n// TODO: HelperFunctions is deprecated\nexport type HelperFunctions = ReturnType<typeof getHelpers>\nexport type Context = ReturnType<typeof getHelpers>\n\nexport type Definitions = {\n  [key: string]: DefinitionComponent\n}\n\n/* eslint-disable no-unused-vars */\nexport type DefinitionComponent = {\n  getConfigs?: (_: HelperFunctions) => Configs\n  getSettings?: (_: HelperFunctions) => Configs\n  getTranslations?: (_: HelperFunctions) => Configs\n  getUI?: (_: HelperFunctions) => Configs,\n  getFeatures?: (_: HelperFunctions) => Configs,\n  getOptions?: () => Component\n}\n\n/* eslint-enable no-unused-vars */\n\nconst getType = (config: Config) => {\n  if (typeof config === `object`) {\n    switch (typeof config.default) {\n    case `boolean`:\n      return `switch`\n    }\n  }\n\n  return `input`\n}\n\nconst standardizeConfig = (key: string, config: Config, skipDefaultCheck = false) => {\n\n  if (isObject(config)) {\n    if (!skipDefaultCheck && (!has(config, `default`) && !has(config, `inherit`))) {\n      throw new Error(`Config \"${key}\" is missing a \"default\" value (or \"inherit\" reference).`)\n    }\n  } else {\n    config = {\n      default: config,\n    }\n  }\n\n  return config as ConfigObject\n}\n\nconst parseConfig = (key: string, config: Config, options: Partial<ConfigObject> = {}) => {\n\n  config = standardizeConfig(key, config)\n\n  delete config.key\n\n  if (config.docLink) {\n    const docLinkText = `Documentation on this feature can be found <a href=\"${config.docLink}\">here</a>.`\n    config.hint = config.hint ? docLinkText + `<br>${config.hint}` : docLinkText\n    delete config.docLink\n  }\n\n  if (config.inherit) {\n    // TODO: It would be nice to eventually show the value of the config that is being inherited from\n    // as part of the message. (This would involve a DB lookup, so we'll save this for a later time.)\n    const inheritText = `When left blank, inherits value from <code>${config.inherit}</code>.`\n    config.hint = config.hint ? inheritText + `<br>${config.hint}` : inheritText\n  }\n\n  return assign({\n    default: null, // This is placed here so that `default` appears as first property\n    type: getType(config),\n    label: startCase(last(split(key, `.`))),\n    category: `setting`,\n  } as ConfigObject, config, options) as ConfigObject\n}\n\nconst parseConfigs = (\n  configs: Configs,\n  options: Partial<ConfigObject> = {},\n  // eslint-disable-next-line no-unused-vars\n  callback?: (key: string, config: Config) => void,\n) => {\n\n  configs = mapKeys(configs, (config: Config, key: string) => {\n    return get(config, `key`, key)\n  })\n\n  return mapValues(configs, (config: Config, key: string) => {\n\n    callback && callback(key, config)\n\n    return parseConfig(key, config, options)\n  }) as StandardizedConfigs\n}\n\nconst parseUniqueConfigs = (set: Configs, configs: Configs, options: Partial<ConfigObject>) => {\n  return parseConfigs(configs, options, (key) => {\n    if (has(set, key)) {\n      throw new Error(`Duplicate key: \"${key}\"`)\n    }\n  })\n}\n\nconst parseConfigsIntoCollection = (set: Configs, configs: Configs, options: Partial<ComponentOptions>) => {\n  merge(set, parseUniqueConfigs(set, configs, options))\n}\n\nconst getHelpers = (components: Components, component: string, helperType: string = `setting`) => {\n\n  const groupTypes = {\n    group: {\n      path: `groups`,\n    },\n    tab: {\n      path: `tabs`,\n    },\n  }\n\n  const trackedGroups = []\n\n  const walkConfigs = (configs: Configs, callback = null) => {\n\n    const walked = {}\n\n    each(configs, (config, key) => {\n      config = standardizeConfig(key, config)\n      if (callback) {\n        const {\n          config: newConfig,\n          key: newKey,\n        } = callback(key, config)\n        walked[newKey] = newConfig\n      } else {\n        walked[key] = config\n      }\n    })\n\n    return walked\n  }\n\n  const setComponentGroup = (name: string, label: string, configs: Configs, type = `group`) => {\n\n    let path: string = groupTypes[type].path\n    let replacement: ComponentOptions = {}\n\n    each(configs, config => {\n      if (typeof config === `object` && config.group) {\n\n        // TODO: This variable should handle cases where group value is deeply nested\n        const groupExpanded = config.group\n\n        each(groupTypes, groupType => {\n          const group = get(components, [component, groupType.path, groupExpanded])\n          if (group) {\n            set(replacement, [groupType.path, groupExpanded], group)\n            unset(components, [component, groupType.path, groupExpanded])\n\n            const holder = get(components, [component, groupType.path], {})\n            if (size(holder) === 0) {\n              unset(components, [component, groupType.path])\n            }\n          }\n        })\n      }\n    })\n\n    // TODO: Need to think about this more\n    // if (has(components, [component, path, name])) {\n    //   throw new Error(`Duplicate ${type}: \"${name}\"`)\n    // }\n\n    set(components, [component, path, name], assign({\n      label: label,\n    }, replacement))\n  }\n\n  const addNested = (name: string, configs: Configs) => {\n    return walkConfigs(configs, (key: string, config: Config) => {\n\n      if (typeof config === `object`) {\n        if (config.visibleIf) {\n          config.visibleIf = `${name}.${config.visibleIf}`\n        }\n\n        config.longLabel = `${startCase(name)} ⇢ ${config.longLabel ? config.longLabel : (config.label ? config.label : startCase(key))}`\n      }\n\n      return {\n        key: `${name}.${key}`,\n        config,\n      }\n    })\n  }\n\n  const addGroup = (\n    name: string,\n    label: string,\n    configs: Configs,\n    nesting = true,\n    type = `group`,\n    /* eslint-disable-next-line no-unused-vars */\n    callback?: (_: string, _2: Config) => void,\n  ) => {\n\n    // TODO: Eventually store a running list of problems so you can see a count of the issues\n    if (includes(trackedGroups, name)) {\n      console.warn(`\"${name}\" group already exists in \"${helperType}\"`)\n    } else {\n      trackedGroups.push(name)\n    }\n\n    setComponentGroup(name, label, configs, type)\n\n    return walkConfigs(configs, (key: string, config: ConfigObject) => {\n      config.group = config.group ? `${name}.${config.group}` : name\n\n      if (callback) {\n        callback(key, config)\n      }\n\n      return {\n        key: nesting ? `${name}.${key}` : key,\n        config,\n      }\n    })\n  }\n\n  const addFeature = (name: string, label: string, configs: Configs, enabled: boolean | Config = false, nesting = true) => {\n\n    if (has(configs, `enabled`)) {\n      throw new Error(`Feature \"${name}\" should not contain a property named \"enabled\".`)\n    }\n\n    configs = assign({\n      enabled: standardizeConfig(`enabled`, enabled),\n    }, configs)\n\n    configs = addGroup(name, label, configs, nesting, `group`, (key, config) => {\n      if (key !== `enabled`) {\n        typeof config === `object` && set(config, `visibleIf`, `${name}.enabled`)\n      }\n    })\n\n    return configs as StandardizedConfigs\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  type AddFieldCallbackInnerFuncType = (key: string, config: Config) => void\n  // eslint-disable-next-line no-unused-vars\n  type RemoveFieldCallbackInnerFuncType = (key: string) => void\n  // eslint-disable-next-line no-unused-vars\n  type ModifyLabelCallbackInnerFuncType = (key: string) => void\n\n  const addField = (\n    key: string,\n    // eslint-disable-next-line no-unused-vars\n    callback?: (arg: {\n      insert: AddFieldCallbackInnerFuncType,\n      modify: AddFieldCallbackInnerFuncType,\n      remove: RemoveFieldCallbackInnerFuncType,\n      modifyLabel: ModifyLabelCallbackInnerFuncType,\n    }) => void,\n  ) => {\n\n    let fields: Configs = {}\n\n    const visibleIf = `${key}.isVisible`\n\n    const prettyKey = startCase(key)\n\n    let label = prettyKey\n\n    fields.isVisible = {\n      default: true,\n      label: `Visible`,\n      longLabel: `${prettyKey} ⇢ Visible`,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.required = {\n      default: false,\n      label: `Required`,\n      longLabel: `${prettyKey} ⇢ Required`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.disabled = {\n      default: false,\n      label: `Disabled`,\n      longLabel: `${prettyKey} ⇢ Disabled`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.readonly = {\n      default: false,\n      label: `Readonly`,\n      longLabel: `${prettyKey} ⇢ Readonly`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.hasAutoFocus = {\n      default: false,\n      label: `Autofocus`,\n      longLabel: `${prettyKey} ⇢ Autofocus`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.pattern = {\n      default: ``,\n      label: `Pattern`,\n      longLabel: `${prettyKey} ⇢ Pattern`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-12`,\n    }\n\n    if (callback) {\n\n      const insert: AddFieldCallbackInnerFuncType = (key, config) => {\n\n        if (has(fields, key)) {\n          throw new Error(`Field ${key} already exists!`)\n        }\n\n        const parsedConfig = parseConfig(key, config, {\n          visibleIf: visibleIf,\n          styleClasses: `col-md-12`,\n        })\n\n        parsedConfig.longLabel = `${prettyKey} ⇢ ${parsedConfig.label}`\n\n        fields[key] = parsedConfig\n      }\n\n      const modify: AddFieldCallbackInnerFuncType = (key, config) => {\n        merge(fields[key], standardizeConfig(key, config, true))\n      }\n\n      const remove: RemoveFieldCallbackInnerFuncType = key => {\n        delete fields[key]\n      }\n\n      const modifyLabel: ModifyLabelCallbackInnerFuncType = newLabel => {\n        label = newLabel\n      }\n\n      callback && callback({\n        insert,\n        modify,\n        remove,\n        modifyLabel,\n      })\n    }\n\n    return addGroup(key, label, fields, true)\n  }\n\n  const addTab = (label: string, configs: Configs) => {\n\n    const name = `${helperType}-${kebabCase(label)}`\n\n    return addGroup(name, label, configs, false, `tab`)\n  }\n\n  type Pluralized = {\n    zero: string,\n    one: string,\n    many: string,\n  }\n\n  const addPluralized = (name: string, plurals: Pluralized) => {\n\n    const configs = {}\n\n    if (plurals.zero) {\n      configs[`0`] = {\n        default: plurals.zero,\n        label: `Zero Case`,\n        hint: `When there are 0 items`,\n      }\n    }\n\n    if (plurals.one) {\n      configs[`1`] = {\n        default: plurals.one,\n        label: `One Case`,\n        hint: `When there is 1 item`,\n      }\n    }\n\n    if (plurals.many) {\n      configs[`other`] = {\n        default: plurals.many,\n        label: `Many Case`,\n        hint: `When there are many items`,\n      }\n    }\n\n    if (size(configs)) {\n      return addNested(name, configs)\n    }\n  }\n\n  return {\n    addNested,\n    addFeature,\n    addGroup,\n    addTab,\n    addField,\n    addPluralized,\n  }\n}\n\nconst parseConfigsAndComponents = (definitions: Definitions) => {\n\n  const configs: Configs = {}\n  const components = parseComponents(definitions)\n\n  each(definitions, (component, key) => {\n\n    const helpParseConfigsWithCategory = (getCategoryFunction, category = `setting`) => {\n\n      let options: Partial<ConfigObject> = {\n        component: key,\n      }\n\n      const helpers = getHelpers(components, key, category)\n\n      if (category) {\n        options = assign(options, {\n          category: category,\n        })\n      }\n\n      const theseConfigs = getCategoryFunction(helpers)\n      if (size(theseConfigs)) {\n\n        const categories = get(components, [key, `categories`], [])\n        categories.push(category)\n        set(components, [key, `categories`], categories)\n\n        parseConfigsIntoCollection(configs, theseConfigs, options)\n      }\n    }\n\n    const {\n      getConfigs,\n      getFeatures,\n      getSettings,\n      getTranslations,\n      getUI,\n    } = component\n\n    if (getConfigs) {\n      helpParseConfigsWithCategory(getConfigs)\n    } else {\n\n      if (getSettings) {\n        helpParseConfigsWithCategory(getSettings, `setting`)\n      }\n\n      if (getTranslations) {\n        helpParseConfigsWithCategory(getTranslations, `translation`)\n      }\n\n      if (getUI) {\n        helpParseConfigsWithCategory(getUI, `ui`)\n      }\n\n      if (getFeatures) {\n        helpParseConfigsWithCategory(getFeatures, `feature`)\n      }\n    }\n  })\n\n  return {\n    configs,\n    components,\n  }\n}\n\nconst parseComponent = (key: string, component?: ComponentOptions) => {\n  return assign({\n    label: startCase(last(split(key, `.`))),\n    order: 0,\n    toggleable: false,\n    description: null,\n    rootKey: null,\n  }, component) as ComponentOptions\n}\n\nconst parseComponents = (components: Components) => {\n  return mapValues(components, (component, key: string) => {\n    const { getOptions } = component\n\n    return parseComponent(key, getOptions ? getOptions() : null)\n  }) as Components\n}\n\nconst parseComponentsFromConfigs = (configs: Configs, structure: Components = {}) => {\n\n  // TODO: Place all these types in the \"types\" directory\n  const components: Components = {}\n\n  let hasUnsorted = false\n\n  each(configs, config => {\n    if (typeof config === `object` && has(config, `component`)) {\n      if (!has(components, config.component)) {\n\n        let options = {}\n        if (has(structure, config.component)) {\n          const { getOptions } = structure[config.component]\n          options = getOptions ? getOptions() : structure[config.component]\n        }\n\n        components[config.component] = parseComponent(config.component, options)\n      }\n    } else {\n      hasUnsorted = true\n    }\n  })\n\n  if (hasUnsorted && size(components)) {\n    components.unsorted = parseComponent(`unsorted`, {\n      order: 999,\n    })\n  }\n\n  return components\n}\n\nconst standardizeConfigs = (configs: Configs, sourceConfigs): StandardizedConfigs => {\n\n  const standardizedConfigs = {}\n\n  each(configs, config => {\n\n    if (isObject(config) && !has(config, `key`)) {\n      throw new Error(`Onboarder config missing key!`)\n    }\n\n    const key: any = isObject(config) ? config.key : config\n\n    if (!has(sourceConfigs, key)) {\n      throw new Error(`Onboarder defines key \"${key}\" which does not exist.`)\n    }\n\n    if (isObject(config)) {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key], config)\n    } else {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key])\n    }\n  })\n\n  return standardizedConfigs\n}\n\nconst parseOnboarderTabs = (tabs, configs): OnboarderTabs => {\n\n  const parsedOnboardersTabs = {}\n\n  each(tabs, (tab, name) => {\n\n    parsedOnboardersTabs[name] = {\n      label: tab.label ? tab.label : startCase(name),\n      configs: standardizeConfigs(tab.configs, configs),\n    }\n  })\n\n  return parsedOnboardersTabs\n}\n\nconst parseOnboarders = (onboarders, configs): Onboarders => {\n\n  const parsedOnboarders = {}\n\n  each(onboarders, ({ getLabel, getTabs }, name) => {\n\n    parsedOnboarders[name] = {\n      label: getLabel ? getLabel() : startCase(name),\n      tabs: getTabs ? parseOnboarderTabs(getTabs(), configs) : {},\n    }\n  })\n\n  return parsedOnboarders\n}\n\nconst verifyConfigs = configs => {\n\n  each(configs, (config, key) => {\n\n    // Make sure \"inherit\" value exists as a key if defined\n    if (config.inherit) {\n\n      if (!has(configs, config.inherit)) {\n        throw new Error(`Config with key \"${key}\" has inherit property defined as \"${config.inherit}\" which is not a valid key!`)\n      }\n    }\n  })\n}\n\nconst parseSource = async ({ getComponents, getConfigs, getLabel, getName, getOnboarders, source }: SourceConfigs) => {\n\n  const name = getName ? await getName() : source\n  const label = getLabel ? await getLabel() : startCase(name)\n\n  const options: Source = {\n    name,\n    label,\n  }\n\n  const grabComponents = getComponents ? await getComponents() : null\n\n  if (getConfigs) {\n    const configs = parseConfigs(await getConfigs())\n    const components = parseComponentsFromConfigs(configs, grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  } else {\n    let { components, configs } = parseConfigsAndComponents(grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  }\n\n  verifyConfigs(options.configs)\n\n  if (getOnboarders) {\n    options.onboarders = parseOnboarders(await getOnboarders(), options.configs)\n  }\n\n  return options\n}\n\nclass SourceError extends Error {\n\n  constructor(source, error) {\n    super(`${error.message} (\"${source}\" source)`)\n    this.name = `SourceError`\n  }\n}\n\nexport { parseSource, SourceError }\n","const logMemoryUsage = () => {\n\n  const used = process.memoryUsage()\n\n  let message = `Memory Usage\\n`\n\n  for (let key in used) {\n    message += `${key}: ${Math.round(used[key] / 1024 / 1024 * 100) / 100} MB\\n`\n  }\n\n  console.log(message)\n}\n\nexport { logMemoryUsage }\n\n","import { parseSource, SourceConfigs } from './parseSource'\n\nconst parseSourceConfigs = async (source: string, stack: SourceConfigs) => {\n\n  const parsedSource = await parseSource({\n    source,\n    ...stack,\n  })\n\n  return parsedSource.configs\n}\n\nexport { parseSourceConfigs }\n"],"names":["_CATEGORIES","ConfigCategory","ConfigCategoryPlurals","CATEGORIES","Setting","plural","label","labelPlural","order","Translation","UI","Feature","assign","lodash","mapValues","getTransformationOptions","options","nested","categorized","sort","fromPairs","sortBy","toPairs","object","each","setWith","transformToNested","transformed","value","key","Object","get","has","transformFromConfigsToResponse","configs","callback","defaultsOnly","response","config","newKey","newValue","differenceWith","isEqual","pickBy","getDiffByStatus","object1","object2","changes","changed","reverseChanges","added","removed","includes","isObject","kebabCase","last","mapKeys","merge","set","size","split","startCase","unset","getType","standardizeConfig","skipDefaultCheck","Error","default","parseConfig","docLink","hint","docLinkText","inherit","inheritText","type","category","parseConfigs","parseComponent","component","toggleable","description","rootKey","standardizeConfigs","sourceConfigs","standardizedConfigs","parseOnboarderTabs","tabs","parsedOnboardersTabs","tab","name","parseSource","getComponents","getConfigs","_ref2","getLabel","getName","getOnboarders","source","_temp4","grabComponents","verifyConfigs","_temp","then","_getOnboarders","onboarders","parsedOnboarders","_ref","getTabs","parseOnboarders","Promise","resolve","components","structure","hasUnsorted","getOptions","unsorted","parseComponentsFromConfigs","definitions","_parseConfigsAndCompo","parseComponents","getCategoryFunction","helpers","helperType","groupTypes","group","path","trackedGroups","walkConfigs","walked","_callback","addNested","visibleIf","longLabel","addGroup","nesting","console","warn","push","replacement","groupExpanded","groupType","holder","setComponentGroup","addFeature","enabled","addTab","addField","fields","prettyKey","isVisible","styleClasses","required","disabled","readonly","hasAutoFocus","pattern","insert","parsedConfig","modify","remove","modifyLabel","newLabel","addPluralized","plurals","zero","one","many","getHelpers","theseConfigs","categories","parseUniqueConfigs","parseConfigsIntoCollection","getFeatures","getSettings","getTranslations","getUI","helpParseConfigsWithCategory","_temp2","_temp3","_temp5","_temp7","e","reject","error","_this","_Error","call","this","message","diff","diffByStatus","statusKey","status","previous","used","process","memoryUsage","Math","round","log","stack","parsedSource","opts","sortObjectAlphabetically","helpTransformResponse"],"mappings":"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"}