{"version":3,"file":"index.module.mjs","sources":["../src/constants/CATEGORIES.ts","../src/fetchConfigs/transformationOptions.ts","../src/sortObjectAlphabetically.ts","../src/fetchConfigs/transformToNested.ts","../src/fetchConfigs/transformResponse.ts","../src/fetchConfigs/transformToConfigValues.ts","../src/getDiff.ts","../src/logMemoryUsage.ts","../src/parseSource/parseSource.ts","../src/parseSource/parseSourceConfigs.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum ConfigCategory {\n  Setting = `setting`,\n  Translation = `translation`,\n  UI = `ui`,\n  Feature = `feature`\n}\n\nexport enum ConfigCategoryPlurals {\n  Setting = `settings`,\n  Translation = `translations`,\n  UI = `ui`,\n  Feature = `features`\n}\n\n/* eslint-enable: no-unused-vars */\nconst CATEGORIES = {\n  [ConfigCategory.Setting]: {\n    plural: ConfigCategoryPlurals.Setting,\n    label: `Setting`,\n    labelPlural: `Settings`,\n    order: 1,\n  },\n  [ConfigCategory.Translation]: {\n    plural: ConfigCategoryPlurals.Translation,\n    label: `Translation`,\n    labelPlural: `Translations`,\n    order: 2,\n  },\n  [ConfigCategory.UI]: {\n    plural: ConfigCategoryPlurals.UI,\n    label: `UI`,\n    labelPlural: `UI`,\n    order: 3,\n  },\n  [ConfigCategory.Feature]: {\n    plural: ConfigCategoryPlurals.Feature,\n    label: `Feature`,\n    labelPlural: `Features`,\n    order: 4,\n  },\n}\n\nexport { CATEGORIES }\n","import lodash from 'lodash'\n\nconst { assign, mapValues } = lodash\n\nexport type TransformationOptions = {\n  nested: boolean,\n  categorized: boolean,\n  sort: boolean,\n}\n\nconst getTransformationOptions = (options: Partial<TransformationOptions> = {}): TransformationOptions => {\n\n  options = mapValues(options, () => true)\n\n  const opts: TransformationOptions = {\n    nested: false,\n    categorized: false,\n    sort: false, // TODO: In EDGE, we may want to be more flexible and allow a string value for `sort` to support different sorting methods\n  }\n\n  return assign(opts, options)\n}\n\nexport { getTransformationOptions }\n","import lodash from 'lodash'\n\nconst { fromPairs, sortBy, toPairs } = lodash\n\nconst sortObjectAlphabetically = object => {\n  return fromPairs(sortBy(toPairs(object), 0)) as object\n}\n\nexport { sortObjectAlphabetically }\n","import lodash from 'lodash'\n\nconst { each, setWith } = lodash\n\nconst transformToNested = object => {\n\n  const transformed = {}\n\n  each(object, (value, key) => {\n    setWith(transformed, key, value, Object)\n  })\n\n  return transformed\n}\n\nexport { transformToNested }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { sortObjectAlphabetically } from '../sortObjectAlphabetically'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get } = lodash\n\nconst helpTransformResponse = (response, callback = null) => {\n\n  const transformed = {}\n\n  each(response, (value, key) => {\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, value)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    transformed[key] = value\n  })\n\n  return transformed\n}\n\nconst transformResponse = (response, opts = {}, configs = null) => {\n\n  const options = getTransformationOptions(opts)\n\n  let transformed = response\n\n  if (options.sort) {\n    transformed = sortObjectAlphabetically(transformed)\n  }\n\n  if (options.categorized) {\n\n    transformed = helpTransformResponse(transformed, key => {\n\n      const config = get(configs, key)\n\n      if (config) {\n        key = `${CATEGORIES[config.category].plural}.${key}`\n      }\n\n      return {\n        key,\n      }\n    })\n  }\n\n  if (options.nested) {\n    return transformToNested(transformed)\n  }\n\n  return transformed\n}\n\nexport { transformResponse }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get, has } = lodash\n\nconst transformFromConfigsToResponse = (configs, callback = null, defaultsOnly = false) => {\n\n  const response = {}\n\n  each(configs, (config, key) => {\n    // Set inherited values\n    if (config.inherit) {\n      config.default = get(configs, config.inherit).default\n    }\n    // TODO: Figure out why configs have value properties when a configuration is saved but not published\n    let value = has(config, `value`) && !defaultsOnly ? config.value : config.default\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, config)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    response[key] = value\n  })\n\n  return response\n}\n\nconst transformToConfigValues = (configs, opts = {}, defaultsOnly = false) => {\n\n  const options = getTransformationOptions(opts)\n\n  const response = transformFromConfigsToResponse(configs, (key, config) => {\n\n    key = options.categorized ? `${CATEGORIES[config.category].plural}.${key}` : key\n\n    return {\n      key,\n    }\n  }, defaultsOnly)\n\n  if (options.nested) {\n    return transformToNested(response)\n  }\n\n  return response\n}\n\nexport { transformFromConfigsToResponse, transformToConfigValues }\n","import lodash from 'lodash'\n\nconst { differenceWith, each, fromPairs, has, isEqual, pickBy, toPairs } = lodash\n\nconst getDiffByStatus = (object1, object2): object => {\n  const changes = fromPairs(differenceWith(toPairs(object2), toPairs(object1), isEqual)) as object\n\n  const added = pickBy(changes, (value, key) => {\n    return !has(object1, key)\n  })\n  \n  const changed = pickBy(changes, (value, key) => {\n    return has(object1, key)\n  })\n\n  const reverseChanges = fromPairs(differenceWith(toPairs(object1), toPairs(object2), isEqual)) as object\n\n  const removed = pickBy(reverseChanges, (value, key) => {\n    return !has(object2, key)\n  })\n\n  return { added: added, changed: changed, removed: removed }\n}\n\nconst getDiff = (object1, object2) => {\n  const diffByStatus = getDiffByStatus(object1, object2)\n\n  const diff = {}\n\n  each (diffByStatus, (value, statusKey) => {\n    each(diffByStatus[statusKey], (value, key) => {\n      diff[key] = {\n        value: value,\n        status: statusKey,\n        previous: object1[key],\n      }\n    })\n  })\n\n  return diff\n}\n\nexport { getDiff, getDiffByStatus }\n","const logMemoryUsage = () => {\n\n  const used = process.memoryUsage()\n\n  let message = `Memory Usage\\n`\n\n  for (let key in used) {\n    message += `${key}: ${Math.round(used[key] / 1024 / 1024 * 100) / 100} MB\\n`\n  }\n\n  console.log(message)\n}\n\nexport { logMemoryUsage }\n\n","import lodash from 'lodash'\n\nimport type { Component, ComponentOptions, Components, Config, ConfigObject, Configs, Onboarder, Onboarders, OnboarderTabs, Source, StandardizedConfigs } from '../types'\n\nconst { assign, each, get, has, includes, isObject, kebabCase, last, mapKeys, mapValues, merge, set, size, split, startCase, unset } = lodash\n\nexport type SourceConfigs = {\n  getComponents?: () => Promise<Components>,\n  getOverrides?: () => Promise<object>\n  getOnboarders?: () => Promise<Onboarder>,\n  getConfigs?: () => Promise<Configs>,\n  getLabel?: () => string | Promise<string | undefined>,\n  getName?: () => string | Promise<string | undefined>,\n  source?: string\n}\n\n// TODO: HelperFunctions is deprecated\nexport type HelperFunctions = ReturnType<typeof getHelpers>\nexport type Context = ReturnType<typeof getHelpers>\n\nexport type Definitions = {\n  [key: string]: DefinitionComponent\n}\n\n/* eslint-disable no-unused-vars */\nexport type DefinitionComponent = {\n  getConfigs?: (_: HelperFunctions) => Configs\n  getSettings?: (_: HelperFunctions) => Configs\n  getTranslations?: (_: HelperFunctions) => Configs\n  getUI?: (_: HelperFunctions) => Configs,\n  getFeatures?: (_: HelperFunctions) => Configs,\n  getOptions?: () => Component\n}\n\n/* eslint-enable no-unused-vars */\n\nconst getType = (config: Config) => {\n  if (typeof config === `object`) {\n    switch (typeof config.default) {\n      case `boolean`:\n        return `switch`\n    }\n  }\n\n  return `input`\n}\n\nconst standardizeConfig = (key: string, config: Config, skipDefaultCheck = false) => {\n\n  if (isObject(config)) {\n    if (!skipDefaultCheck && (!has(config, `default`) && !has(config, `inherit`))) {\n      throw new Error(`Config \"${key}\" is missing a \"default\" value (or \"inherit\" reference).`)\n    }\n  } else {\n    config = {\n      default: config,\n    }\n  }\n\n  return config as ConfigObject\n}\n\nconst parseConfig = (key: string, config: Config, options: Partial<ConfigObject> = {}) => {\n\n  config = standardizeConfig(key, config)\n\n  delete config.key\n\n  if (config.docLink) {\n    const docLinkText = `Documentation on this feature can be found <a href=\"${config.docLink}\">here</a>.`\n    config.hint = config.hint ? docLinkText + `<br>${config.hint}` : docLinkText\n    delete config.docLink\n  }\n\n  if (config.inherit) {\n    // TODO: It would be nice to eventually show the value of the config that is being inherited from\n    // as part of the message. (This would involve a DB lookup, so we'll save this for a later time.)\n    const inheritText = `When unchanged, inherits value from <code>${config.inherit}</code>.`\n    config.hint = config.hint ? inheritText + `<br>${config.hint}` : inheritText\n  }\n\n  return assign({\n    default: null, // This is placed here so that `default` appears as first property\n    type: getType(config),\n    label: startCase(last(split(key, `.`))),\n    category: `setting`,\n  } as ConfigObject, config, options) as ConfigObject\n}\n\nconst parseConfigs = (\n  configs: Configs,\n  options: Partial<ConfigObject> = {},\n  // eslint-disable-next-line no-unused-vars\n  callback?: (key: string, config: Config) => void,\n) => {\n\n  configs = mapKeys(configs, (config: Config, key: string) => {\n    return get(config, `key`, key)\n  })\n\n  return mapValues(configs, (config: Config, key: string) => {\n\n    callback && callback(key, config)\n\n    return parseConfig(key, config, options)\n  }) as StandardizedConfigs\n}\n\nconst parseUniqueConfigs = (set: Configs, configs: Configs, options: Partial<ConfigObject>) => {\n  return parseConfigs(configs, options, (key) => {\n    if (has(set, key)) {\n      throw new Error(`Duplicate key: \"${key}\"`)\n    }\n  })\n}\n\nconst parseConfigsIntoCollection = (set: Configs, configs: Configs, options: Partial<ComponentOptions>) => {\n  merge(set, parseUniqueConfigs(set, configs, options))\n}\n\nconst getHelpers = (components: Components, component: string, helperType: string = `setting`) => {\n\n  const groupTypes = {\n    group: {\n      path: `groups`,\n    },\n    tab: {\n      path: `tabs`,\n    },\n  }\n\n  const trackedGroups = []\n\n  const walkConfigs = (configs: Configs, callback = null) => {\n\n    const walked = {}\n\n    each(configs, (config, key) => {\n      config = standardizeConfig(key, config)\n      if (callback) {\n        const {\n          config: newConfig,\n          key: newKey,\n        } = callback(key, config)\n        walked[newKey] = newConfig\n      } else {\n        walked[key] = config\n      }\n    })\n\n    return walked\n  }\n\n  const setComponentGroup = (name: string, label: string, configs: Configs, type = `group`) => {\n\n    let path: string = groupTypes[type].path\n    let replacement: ComponentOptions = {}\n\n    each(configs, config => {\n      if (typeof config === `object` && config.group) {\n\n        // TODO: This variable should handle cases where group value is deeply nested\n        const groupExpanded = config.group\n\n        each(groupTypes, groupType => {\n          const group = get(components, [component, groupType.path, groupExpanded])\n          if (group) {\n            set(replacement, [groupType.path, groupExpanded], group)\n            unset(components, [component, groupType.path, groupExpanded])\n\n            const holder = get(components, [component, groupType.path], {})\n            if (size(holder) === 0) {\n              unset(components, [component, groupType.path])\n            }\n          }\n        })\n      }\n    })\n\n    // TODO: Need to think about this more\n    // if (has(components, [component, path, name])) {\n    //   throw new Error(`Duplicate ${type}: \"${name}\"`)\n    // }\n\n    set(components, [component, path, name], assign({\n      label: label,\n    }, replacement))\n  }\n\n  const addNested = (name: string, configs: Configs) => {\n    return walkConfigs(configs, (key: string, config: Config) => {\n\n      if (typeof config === `object`) {\n        if (config.visibleIf) {\n          config.visibleIf = `${name}.${config.visibleIf}`\n        }\n\n        config.longLabel = `${startCase(name)} ⇢ ${config.longLabel ? config.longLabel : (config.label ? config.label : startCase(key))}`\n      }\n\n      return {\n        key: `${name}.${key}`,\n        config,\n      }\n    })\n  }\n\n  const addGroup = (\n    name: string,\n    label: string,\n    configs: Configs,\n    nesting = true,\n    type = `group`,\n    /* eslint-disable-next-line no-unused-vars */\n    callback?: (_: string, _2: Config) => void,\n  ) => {\n\n    // TODO: Eventually store a running list of problems so you can see a count of the issues\n    if (includes(trackedGroups, name)) {\n      console.warn(`\"${name}\" group already exists in \"${helperType}\"`)\n    } else {\n      trackedGroups.push(name)\n    }\n\n    setComponentGroup(name, label, configs, type)\n\n    return walkConfigs(configs, (key: string, config: ConfigObject) => {\n      config.group = config.group ? `${name}.${config.group}` : name\n\n      if (callback) {\n        callback(key, config)\n      }\n\n      return {\n        key: nesting ? `${name}.${key}` : key,\n        config,\n      }\n    })\n  }\n\n  const addFeature = (name: string, label: string, configs: Configs, enabled: boolean | Config = false, nesting = true) => {\n\n    if (has(configs, `enabled`)) {\n      throw new Error(`Feature \"${name}\" should not contain a property named \"enabled\".`)\n    }\n\n    configs = assign({\n      enabled: standardizeConfig(`enabled`, enabled),\n    }, configs)\n\n    configs = addGroup(name, label, configs, nesting, `group`, (key, config) => {\n      if (key !== `enabled`) {\n        typeof config === `object` && set(config, `visibleIf`, `${name}.enabled`)\n      }\n    })\n\n    return configs as StandardizedConfigs\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  type AddFieldCallbackInnerFuncType = (key: string, config: Config) => void\n  // eslint-disable-next-line no-unused-vars\n  type RemoveFieldCallbackInnerFuncType = (key: string) => void\n  // eslint-disable-next-line no-unused-vars\n  type ModifyLabelCallbackInnerFuncType = (key: string) => void\n\n  const addField = (\n    key: string,\n    // eslint-disable-next-line no-unused-vars\n    callback?: (arg: {\n      insert: AddFieldCallbackInnerFuncType,\n      modify: AddFieldCallbackInnerFuncType,\n      remove: RemoveFieldCallbackInnerFuncType,\n      modifyLabel: ModifyLabelCallbackInnerFuncType,\n    }) => void,\n  ) => {\n\n    let fields: Configs = {}\n\n    const visibleIf = `${key}.isVisible`\n\n    const prettyKey = startCase(key)\n\n    let label = prettyKey\n\n    fields.isVisible = {\n      default: true,\n      label: `Visible`,\n      longLabel: `${prettyKey} ⇢ Visible`,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.required = {\n      default: false,\n      label: `Required`,\n      longLabel: `${prettyKey} ⇢ Required`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.disabled = {\n      default: false,\n      label: `Disabled`,\n      longLabel: `${prettyKey} ⇢ Disabled`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.hasAutoFocus = {\n      default: false,\n      label: `Autofocus`,\n      longLabel: `${prettyKey} ⇢ Autofocus`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.pattern = {\n      default: ``,\n      label: `Pattern`,\n      longLabel: `${prettyKey} ⇢ Pattern`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-12`,\n    }\n\n    if (callback) {\n\n      const insert: AddFieldCallbackInnerFuncType = (key, config) => {\n\n        if (has(fields, key)) {\n          throw new Error(`Field ${key} already exists!`)\n        }\n\n        const parsedConfig = parseConfig(key, config, {\n          visibleIf: visibleIf,\n          styleClasses: `col-md-12`,\n        })\n\n        parsedConfig.longLabel = `${prettyKey} ⇢ ${parsedConfig.label}`\n\n        fields[key] = parsedConfig\n      }\n\n      const modify: AddFieldCallbackInnerFuncType = (key, config) => {\n        merge(fields[key], standardizeConfig(key, config, true))\n      }\n\n      const remove: RemoveFieldCallbackInnerFuncType = key => {\n        delete fields[key]\n      }\n\n      const modifyLabel: ModifyLabelCallbackInnerFuncType = newLabel => {\n        label = newLabel\n      }\n\n      callback && callback({\n        insert,\n        modify,\n        remove,\n        modifyLabel,\n      })\n    }\n\n    return addGroup(key, label, fields, true)\n  }\n\n  const addTab = (label: string, configs: Configs) => {\n\n    const name = `${helperType}-${kebabCase(label)}`\n\n    return addGroup(name, label, configs, false, `tab`)\n  }\n\n  type Pluralized = {\n    zero: string,\n    one: string,\n    many: string,\n  }\n\n  const addPluralized = (name: string, plurals: Pluralized) => {\n\n    const configs = {}\n\n    if (plurals.zero) {\n      configs[`0`] = {\n        default: plurals.zero,\n        label: `Zero Case`,\n        hint: `When there are 0 items`,\n      }\n    }\n\n    if (plurals.one) {\n      configs[`1`] = {\n        default: plurals.one,\n        label: `One Case`,\n        hint: `When there is 1 item`,\n      }\n    }\n\n    if (plurals.many) {\n      configs[`other`] = {\n        default: plurals.many,\n        label: `Many Case`,\n        hint: `When there are many items`,\n      }\n    }\n\n    if (size(configs)) {\n      return addNested(name, configs)\n    }\n  }\n\n  return {\n    addNested,\n    addFeature,\n    addGroup,\n    addTab,\n    addField,\n    addPluralized,\n  }\n}\n\nconst parseConfigsAndComponents = (definitions: Definitions) => {\n\n  const configs: Configs = {}\n  const components = parseComponents(definitions)\n\n  each(definitions, (component, key) => {\n\n    const helpParseConfigsWithCategory = (getCategoryFunction, category = `setting`) => {\n\n      let options: Partial<ConfigObject> = {\n        component: key,\n      }\n\n      const helpers = getHelpers(components, key, category)\n\n      if (category) {\n        options = assign(options, {\n          category: category,\n        })\n      }\n\n      const theseConfigs = getCategoryFunction(helpers)\n      if (size(theseConfigs)) {\n\n        const categories = get(components, [key, `categories`], [])\n        categories.push(category)\n        set(components, [key, `categories`], categories)\n\n        parseConfigsIntoCollection(configs, theseConfigs, options)\n      }\n    }\n\n    const {\n      getConfigs,\n      getFeatures,\n      getSettings,\n      getTranslations,\n      getUI,\n    } = component\n\n    if (getConfigs) {\n      helpParseConfigsWithCategory(getConfigs)\n    } else {\n\n      if (getSettings) {\n        helpParseConfigsWithCategory(getSettings, `setting`)\n      }\n\n      if (getTranslations) {\n        helpParseConfigsWithCategory(getTranslations, `translation`)\n      }\n\n      if (getUI) {\n        helpParseConfigsWithCategory(getUI, `ui`)\n      }\n\n      if (getFeatures) {\n        helpParseConfigsWithCategory(getFeatures, `feature`)\n      }\n    }\n  })\n\n  return {\n    configs,\n    components,\n  }\n}\n\nconst parseComponent = (key: string, component?: ComponentOptions) => {\n  return assign({\n    label: startCase(last(split(key, `.`))),\n    order: 0,\n    toggleable: false,\n    description: null,\n    rootKey: null,\n  }, component) as ComponentOptions\n}\n\nconst parseComponents = (components: Components) => {\n  return mapValues(components, (component, key: string) => {\n    const { getOptions } = component\n\n    return parseComponent(key, getOptions ? getOptions() : null)\n  }) as Components\n}\n\nconst parseComponentsFromConfigs = (configs: Configs, structure: Components = {}) => {\n\n  // TODO: Place all these types in the \"types\" directory\n  const components: Components = {}\n\n  let hasUnsorted = false\n\n  each(configs, config => {\n    if (typeof config === `object` && has(config, `component`)) {\n      if (!has(components, config.component)) {\n\n        let options = {}\n        if (has(structure, config.component)) {\n          const { getOptions } = structure[config.component]\n          options = getOptions ? getOptions() : structure[config.component]\n        }\n\n        components[config.component] = parseComponent(config.component, options)\n      }\n    } else {\n      hasUnsorted = true\n    }\n  })\n\n  if (hasUnsorted && size(components)) {\n    components.unsorted = parseComponent(`unsorted`, {\n      order: 999,\n    })\n  }\n\n  return components\n}\n\nconst standardizeConfigs = (configs: Configs, sourceConfigs): StandardizedConfigs => {\n\n  const standardizedConfigs = {}\n\n  each(configs, config => {\n\n    if (isObject(config) && !has(config, `key`)) {\n      throw new Error(`Onboarder config missing key!`)\n    }\n\n    const key: any = isObject(config) ? config.key : config\n\n    if (!has(sourceConfigs, key)) {\n      throw new Error(`Onboarder defines key \"${key}\" which does not exist.`)\n    }\n\n    if (isObject(config)) {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key], config)\n    } else {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key])\n    }\n  })\n\n  return standardizedConfigs\n}\n\nconst parseOnboarderTabs = (tabs, configs): OnboarderTabs => {\n\n  const parsedOnboardersTabs = {}\n\n  each(tabs, (tab, name) => {\n\n    parsedOnboardersTabs[name] = {\n      label: tab.label ? tab.label : startCase(name),\n      configs: standardizeConfigs(tab.configs, configs),\n    }\n  })\n\n  return parsedOnboardersTabs\n}\n\nconst parseOnboarders = (onboarders, configs): Onboarders => {\n\n  const parsedOnboarders = {}\n\n  each(onboarders, ({ getLabel, getTabs }, name) => {\n\n    parsedOnboarders[name] = {\n      label: getLabel ? getLabel() : startCase(name),\n      tabs: getTabs ? parseOnboarderTabs(getTabs(), configs) : {},\n    }\n  })\n\n  return parsedOnboarders\n}\n\nconst verifyConfigs = configs => {\n\n  each(configs, (config, key) => {\n\n    // Make sure \"inherit\" value exists as a key if defined\n    if (config.inherit) {\n\n      if (!has(configs, config.inherit)) {\n        throw new Error(`Config with key \"${key}\" has inherit property defined as \"${config.inherit}\" which is not a valid key!`)\n      }\n    }\n  })\n}\n\nconst parseSource = async ({ getComponents, getConfigs, getLabel, getName, getOnboarders, getOverrides, source }: SourceConfigs) => {\n\n  const name = getName ? await getName() : source\n  const label = getLabel ? await getLabel() : startCase(name)\n\n  const options: Source = {\n    name,\n    label,\n  }\n\n  const grabComponents = getComponents ? await getComponents() : null\n\n  if (getConfigs) {\n    const configs = parseConfigs(await getConfigs())\n    const components = parseComponentsFromConfigs(configs, grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  } else {\n    let { components, configs } = parseConfigsAndComponents(grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  }\n\n  verifyConfigs(options.configs)\n\n  if (getOnboarders) {\n    options.onboarders = parseOnboarders(await getOnboarders(), options.configs)\n  }\n\n  if (getOverrides) {\n    options.overrides = await getOverrides()\n  }\n\n  return options\n}\n\nclass SourceError extends Error {\n\n  constructor(source, error) {\n    super(`${error.message} (\"${source}\" source)`)\n    this.name = `SourceError`\n  }\n}\n\nexport { parseSource, SourceError }\n","import { parseSource, SourceConfigs } from './parseSource'\n\nconst parseSourceConfigs = async (source: string, stack: SourceConfigs) => {\n\n  const parsedSource = await parseSource({\n    source,\n    ...stack,\n  })\n\n  return parsedSource.configs\n}\n\nexport { parseSourceConfigs }\n"],"names":["_CATEGORIES","ConfigCategory","ConfigCategoryPlurals","CATEGORIES","Setting","plural","label","labelPlural","order","Translation","UI","Feature","assign","lodash","mapValues","getTransformationOptions","options","nested","categorized","sort","fromPairs","sortBy","toPairs","object","each","setWith","transformToNested","transformed","value","key","Object","get","transformResponse","response","opts","configs","sortObjectAlphabetically","callback","newKey","newValue","helpTransformResponse","config","category","has","transformFromConfigsToResponse","defaultsOnly","inherit","transformToConfigValues","differenceWith","isEqual","pickBy","getDiffByStatus","object1","object2","changes","changed","reverseChanges","added","removed","getDiff","diff","diffByStatus","statusKey","status","previous","logMemoryUsage","used","process","memoryUsage","message","Math","round","console","log","includes","isObject","kebabCase","last","mapKeys","merge","set","size","split","startCase","unset","getType","standardizeConfig","skipDefaultCheck","Error","default","parseConfig","docLink","docLinkText","hint","inheritText","type","parseConfigs","component","toggleable","description","rootKey","standardizeConfigs","sourceConfigs","standardizedConfigs","tabs","parsedOnboardersTabs","tab","name","parseSource","getComponents","getConfigs","_ref2","getLabel","getName","getOnboarders","getOverrides","source","_temp7","_temp6","grabComponents","overrides","_getOverrides","onboarders","getTabs","_ref","parsedOnboarders","parseOnboarderTabs","parseOnboarders","_getOnboarders","_temp2","then","_temp3","_temp4","_getConfigs","components","structure","getOptions","parseComponent","hasUnsorted","unsorted","parseComponentsFromConfigs","definitions","parseConfigsAndComponents","parseComponents","helpParseConfigsWithCategory","getCategoryFunction","helpers","helperType","groupTypes","group","path","trackedGroups","walkConfigs","walked","_callback","visibleIf","longLabel","addGroup","nesting","warn","push","groupExpanded","groupType","replacement","holder","setComponentGroup","addNested","addFeature","enabled","addTab","addField","fields","prettyKey","isVisible","styleClasses","required","disabled","hasAutoFocus","pattern","insert","parsedConfig","modify","remove","modifyLabel","newLabel","addPluralized","plurals","zero","one","many","getHelpers","theseConfigs","categories","parseUniqueConfigs","parseConfigsIntoCollection","getFeatures","getSettings","getTranslations","getUI","_parseConfigsAndCompo","_temp5","Promise","resolve","_temp9","e","reject","error","_this","_Error","call","this","parseSourceConfigs","stack","parsedSource"],"mappings":"sBACA,IAAAA,EAAAC,KAAA,SAAYA,GACVA,EAAA,QAAA,UACAA,EAAA,YAAA,cACAA,EAAA,GAAA,KACAA,EAAA,QAAA,UAJF,CAAYA,IAAAA,EAKX,KAED,SAAYC,GACVA,EAAA,QAAA,WACAA,EAAA,YAAA,eACAA,EAAA,GAAA,KACAA,EAAA,QAAA,WAJF,CAAYA,IAAAA,EAKX,KAGKC,IAAAA,IACHF,EAAAA,IAAAA,EAAeG,SAAU,CACxBC,OAAQH,EAAsBE,QAC9BE,MAAK,UACLC,YAAW,WACXC,MAAO,GALKR,EAObC,EAAeQ,aAAc,CAC5BJ,OAAQH,EAAsBO,YAC9BH,MAF4B,cAG5BC,YAH4B,eAI5BC,MAAO,GAERP,EAAAA,EAAeS,IAAK,CACnBL,OAAQH,EAAsBQ,GAC9BJ,WACAC,iBACAC,MAAO,KAERP,EAAeU,SAAU,CACxBN,OAAQH,EAAsBS,QAC9BL,MAFwB,UAGxBC,YAHwB,WAIxBC,MAAO,GAvBXR,GCdAY,EAA8BC,EAAtBD,OAAQE,EAAcD,EAAdC,UAQcC,EAAG,SAACC,GAUhC,gBAVgCA,IAAAA,EAA0C,IAE1EA,EAAUF,EAAUE,EAAS,WAAA,OAAA,IAQtBJ,EAN6B,CAClCK,QAAQ,EACRC,aAAa,EACbC,MAAM,GAGYH,IClBtBI,EAAuCP,EAA/BO,UAAWC,EAAoBR,EAApBQ,OAAQC,EAAYT,EAAZS,UAEM,SAAAC,GAC/B,OAAgBH,EAACC,EAAOC,EAAQC,GAAS,KCH3CC,EAA0BX,EAAlBW,KAAMC,EAAYZ,EAAZY,QAERC,EAAoB,SAAAH,GAExB,IAAiBI,EAAG,GAMpB,OAJAH,EAAKD,EAAQ,SAACK,EAAOC,GACnBJ,EAAQE,EAAaE,EAAKD,EAAOE,UAIpCH,GCNOH,EAAcX,EAAdW,KAAMO,EAAQlB,EAARkB,IA8BSC,EAAG,SAACC,EAAUC,EAAWC,QAAkB,IAA7BD,IAAAA,EAAO,SAAIC,IAAAA,IAAAA,EAAU,MAExD,IAAanB,EAAGD,EAAyBmB,GAErCP,EAAcM,EAsBlB,OApBIjB,EAAQG,OACVQ,EAAcS,EAAyBT,IAGrCX,EAAQE,cAEVS,EAxC0B,SAACM,EAAUI,QAAmB,IAAnBA,IAAAA,EAAW,MAElD,IAAMV,EAAc,GAuBpB,OArBAH,EAAKS,EAAU,SAACL,EAAOC,GAErB,GAAIQ,EAAU,CAEZ,MAGIA,EAASR,EAAKD,GAFXU,EAALT,EAAAA,IACOU,EAAPX,EAAAA,MAGEU,IACFT,EAAMS,GAGJC,IACFX,EAAQW,GAIZZ,EAAYE,GAAOD,IAGdD,EAeSa,CAAsBb,EAAa,SAAAE,GAE/C,IAAYY,EAAGV,EAAII,EAASN,GAM5B,OAJIY,IACFZ,EAAS1B,EAAWsC,EAAOC,UAAUrC,WAAUwB,GAG1C,CACLA,IAAAA,MAKFb,EAAQC,OACcS,EAACC,GAI5BA,GC9DDH,EAA2BX,EAAnBW,KAAMO,EAAalB,EAAbkB,IAAKY,EAAQ9B,EAAR8B,IAEiBC,EAAG,SAACT,EAASE,EAAiBQ,QAAwB,IAAzCR,IAAAA,EAAW,WAA8B,IAAxBQ,IAAAA,GAAe,GAE/E,IAAcZ,EAAG,GA6BjB,OA3BAT,EAAKW,EAAS,SAACM,EAAQZ,GAEjBY,EAAOK,UACTL,EAAM,QAAWV,EAAII,EAASM,EAAOK,SACtC,SAED,IAAIlB,EAAQe,EAAIF,EAAJ,WAAyBI,EAAeJ,EAAOb,MAAQa,EAAnE,QAEA,GAAIJ,EAAU,CAEZ,IAGIA,EAAAA,EAASR,EAAKY,GAFXH,EAALT,EAAAA,IACOU,EAAPX,EAAAA,MAGEU,IACFT,EAAMS,GAGJC,IACFX,EAAQW,GAIZN,EAASJ,GAAOD,IAGXK,GAGHc,EAA0B,SAACZ,EAASD,EAAWW,QAAXX,IAAAA,IAAAA,EAAO,SAAIW,IAAAA,IAAAA,GAAe,GAElE,IAAa7B,EAAGD,EAAyBmB,GAEnCD,EAAWW,EAA+BT,EAAS,SAACN,EAAKY,GAI7D,MAAO,CACLZ,IAHFA,EAAMb,EAAQE,YAAiBf,EAAWsC,EAAOC,UAAUrC,OAArD,IAA+DwB,EAAQA,IAK5EgB,GAEH,OAAI7B,EAAQC,OACHS,EAAkBO,GAGpBA,GCzDDe,EAAmEnC,EAAnEmC,eAAgBxB,EAAmDX,EAAnDW,KAAMJ,EAA6CP,EAA7CO,UAAWuB,EAAkC9B,EAAlC8B,IAAKM,EAA6BpC,EAA7BoC,QAASC,EAAoBrC,EAApBqC,OAAQ5B,EAAYT,EAAZS,QAEzD6B,EAAkB,SAACC,EAASC,GAChC,IAAaC,EAAGlC,EAAU4B,EAAe1B,EAAQ+B,GAAU/B,EAAQ8B,GAAUH,MAE/DC,EAAOI,EAAS,SAAC1B,EAAOC,GACpC,OAAQc,EAAIS,EAASvB,KAGV0B,EAAGL,EAAOI,EAAS,SAAC1B,EAAOC,GACtC,OAAUc,EAACS,EAASvB,KAGF2B,EAAGpC,EAAU4B,EAAe1B,EAAQ8B,GAAU9B,EAAQ+B,GAAUJ,IAMpF,MAAO,CAAEQ,MAAOA,EAAOF,QAASA,EAASG,QAJzBR,EAAOM,EAAgB,SAAC5B,EAAOC,GAC7C,OAAQc,EAAIU,EAASxB,OAMnB8B,EAAU,SAACP,EAASC,GACxB,MAAqBF,EAAgBC,EAASC,GAExCO,EAAO,GAYb,OAVApC,EAAMqC,EAAc,SAACjC,EAAOkC,GAC1BtC,EAAKqC,EAAaC,GAAY,SAAClC,EAAOC,GACpC+B,EAAK/B,GAAO,CACVD,MAAOA,EACPmC,OAAQD,EACRE,SAAUZ,EAAQvB,QAKjB+B,GCvCHK,EAAiB,WAErB,IAAUC,EAAGC,QAAQC,cAEjBC,EAAJ,iBAEA,IAAK,IAALxC,KAAAqC,EACEG,GAAcxC,OAAQyC,KAAKC,MAAML,EAAKrC,GAAO,KAAO,KAAO,KAAO,IAA3D,QAGT2C,QAAQC,IAAIJ,i5CCNd,MAAuIxD,EAA/HD,OAAQY,EAAuHX,EAAvHW,KAAMO,EAAiHlB,EAAjHkB,IAAKY,EAA4G9B,EAA5G8B,IAAK+B,EAAuG7D,EAAvG6D,SAAUC,EAA6F9D,EAA7F8D,SAAUC,EAAmF/D,EAAnF+D,UAAWC,EAAwEhE,EAAxEgE,KAAMC,EAAkEjE,EAAlEiE,QAAShE,EAAyDD,EAAzDC,UAAWiE,EAA8ClE,EAA9CkE,MAAOC,EAAuCnE,EAAvCmE,IAAKC,EAAkCpE,EAAlCoE,KAAMC,EAA4BrE,EAA5BqE,MAAOC,EAAqBtE,EAArBsE,UAAWC,GAAUvE,EAAVuE,MAgCvHC,GAAU,SAAC5C,GACf,MAAA,iBAAWA,GAGL,kBAFiBA,EAAA,QAEjB,kBAOF6C,GAAoB,SAACzD,EAAaY,EAAgB8C,GAEtD,QAFkF,IAA5BA,IAAAA,GAAmB,GAErEZ,EAASlC,IACX,IAAK8C,IAAsB5C,EAAIF,EAAL,aAA4BE,EAAIF,EAAD,WACvD,MAAU+C,IAAAA,MAAiB3D,WAAAA,mEAG7BY,EAAS,CACPgD,QAAShD,GAIb,OACDA,GAEKiD,GAAc,SAAC7D,EAAaY,EAAgBzB,GAMhD,YANgDA,IAAAA,EAAiC,WAEjFyB,EAAS6C,GAAkBzD,EAAKY,IAElBZ,IAEVY,EAAOkD,QAAS,CAClB,IAAiBC,EAAA,uDAA0DnD,EAAOkD,sBAClFlD,EAAOoD,KAAOpD,EAAOoD,KAAOD,EAAqBnD,OAAAA,EAAOoD,KAASD,WACnDD,QAGhB,GAAIlD,EAAOK,QAAS,CAGlB,IAAiBgD,EAAA,6CAAgDrD,EAAOK,QAAxE,WACAL,EAAOoD,KAAOpD,EAAOoD,KAAOC,EAAW,OAAUrD,EAAOoD,KAASC,EAGnE,OAAalF,EAAC,CACZ6E,QAAS,KACTM,KAAMV,GAAQ5C,GACdnC,MAAO6E,EAAUN,EAAKK,EAAMrD,SAC5Ba,SAAQ,WACSD,EAAQzB,IAGvBgF,GAAe,SACnB7D,EACAnB,EAEAqB,GAOA,gBATArB,IAAAA,EAAiC,IAKjCmB,EAAU2C,EAAQ3C,EAAS,SAACM,EAAgBZ,GAC1C,OAAUE,EAACU,EAAeZ,MAAAA,KAGZf,EAACqB,EAAS,SAACM,EAAgBZ,GAIzC,OAFAQ,GAAYA,EAASR,EAAKY,GAERiD,GAAC7D,EAAKY,EAAQzB,SAiYb,SAACa,EAAaoE,GACnC,OAAarF,EAAC,CACZN,MAAO6E,EAAUN,EAAKK,EAAMrD,EAAP,OACrBrB,MAAO,EACP0F,YAAY,EACZC,YAAa,KACbC,QAAS,MACRH,IA4CmBI,GAAG,SAAClE,EAAkBmE,GAE5C,IAAMC,EAAsB,GAqB5B,OAnBA/E,EAAKW,EAAS,SAAAM,GAEZ,GAAIkC,EAASlC,KAAYE,EAAIF,EAA7B,OACE,MAAM,IAAA+C,MAAA,iCAGR,IAAM3D,EAAW8C,EAASlC,GAAUA,EAAOZ,IAAMY,EAEjD,IAAKE,EAAI2D,EAAezE,GACtB,MAAU2D,IAAAA,MAAgC3D,0BAAAA,6BAI1C0E,EAAoB1E,GADlB8C,EAASlC,GACgB7B,EAAO,GAAI0F,EAAczE,GAAMY,GAE/B7B,EAAO,GAAI0F,EAAczE,MAKzD0E,MAE0B,SAACC,EAAMrE,GAEhC,IAA0BsE,EAAG,GAU7B,OARAjF,EAAKgF,EAAM,SAACE,EAAKC,GAEfF,EAAqBE,GAAQ,CAC3BrG,MAAOoG,EAAIpG,MAAQoG,EAAIpG,MAAQ6E,EAAUwB,GACzCxE,QAASkE,GAAmBK,EAAIvE,QAASA,MAK9CsE,GA+BgBG,GAAA,SAAYC,GAAAA,IAAAA,EAAAA,EAAAA,cAAeC,EAA3BC,EAA2BD,WAAYE,EAAAA,EAAAA,SAAUC,IAAAA,QAASC,EAA1DH,EAA0DG,cAAeC,EAAAA,EAAAA,aAAcC,EAAvFL,EAAuFK,OAAvF,mBAETT,GAF2H,SAAAU,EAG3H/G,GAH2H,SAAAgH,EAU3HC,GAuBFJ,SAAAA,IAAAA,SAAAA,IAAAA,IAAAA,EAAAA,WAAAA,GAAAA,EACwBA,OAAAA,QAAAA,QAAAA,KAA1BnG,KAAAA,SAAAA,GAAAA,EAAQwG,UAARC,IADEN,sCAIJ,OAAOnG,IAAAA,EAnDa,IAAAmB,EAEpBX,EAFoBW,EAyCNnB,EAAQmB,QAvCR,SAACM,EAAQZ,GAGrB,GAAIY,EAAOK,UAEJH,EAAIR,EAASM,EAAOK,SACvB,MAAM,IAAA0C,MAAA,oBAA8B3D,EAAyCY,sCAAAA,EAAOK,yCAMuC,IA6B7HoE,EAAAA,WAAAA,GAAAA,yBACyCA,KAA3ClG,KAAAA,SAAAA,GAAAA,EAAQ0G,WA3DY,SAACA,EAAYvF,GAEnC,MAAyB,GAUzB,OARAX,EAAKkG,EAAY,SAAwBf,EAAAA,GAArBK,IAAAA,EAAAA,EAAAA,SAAUW,EAAmBC,EAAnBD,QAE5BE,EAAiBlB,GAAQ,CACvBrG,MAAO0G,EAAWA,IAAa7B,EAAUwB,GACzCH,KAAMmB,EAAUG,GAAmBH,IAAWxF,GAAW,MAK9D0F,EA8CwBE,CAAeC,EAAwBhH,EAAQmB,WADlE+E,GA7B6H,OAAAe,GAAAA,EAAAC,KAAAD,EAAAC,KAAAC,GAAAA,IAAA,IAAAC,EAAA,WAAA,GAY7HtB,EACiCA,OAAAA,QAAAA,QAAAA,KAb4FoB,KAAA,SAAAG,GAa/H,IAAalG,EAAG6D,GAAYqC,GACtBC,EArHyB,SAACnG,EAAkBoG,QAA8B,IAA9BA,IAAAA,EAAwB,IAG5E,IAAgBD,EAAe,MAEb,EAyBlB,OAvBA9G,EAAKW,EAAS,SAAAM,GACZ,GAAI,iBAAAA,GAA8BE,EAAIF,EAAtC,cACE,IAAKE,EAAI2F,EAAY7F,EAAOwD,WAAY,CAEtC,IAAIjF,EAAU,GACd,GAAI2B,EAAI4F,EAAW9F,EAAOwD,WAAY,CACpC,IAAAuC,EAAuBD,EAAU9F,EAAOwD,WAAhCuC,WACRxH,EAAUwH,EAAaA,IAAeD,EAAU9F,EAAOwD,WAGzDqC,EAAW7F,EAAOwD,WAAawC,GAAehG,EAAOwD,UAAWjF,SAGlE0H,GAAc,IAIdA,GAAezD,EAAKqD,KACtBA,EAAWK,SAAWF,GAA2B,WAAA,CAC/CjI,MAAO,OAIJ8H,EAuFcM,CAA2BzG,EAASoF,GACvDxC,EAAM/D,EAAS,CACbmB,QAAAA,EACAmG,WAAAA,MAGF,IAjN+BO,MAiNDC,KA/MP,KA4EH,SAACR,GACvB,OAAOxH,EAAUwH,EAAY,SAACrC,EAAWpE,GACvC,IAAA2G,EAAuBvC,EAAfuC,WAER,UAAsB3G,EAAK2G,EAAaA,IAAe,QA/EtCO,CAHcF,EAiNyBtB,GA5M1D/F,EAAKqH,EAAa,SAAC5C,EAAWpE,GAE5B,IAAMmH,EAA+B,SAACC,EAAqBvG,QAAAA,IAAAA,IAAAA,aAEzD,IAAI1B,EAAiC,CACnCiF,UAAWpE,GAGAqH,EA1TA,SAACZ,EAAwBrC,EAAmBkD,YAAAA,IAAAA,EAAkC,WAE/F,IAAMC,EAAa,CACjBC,MAAO,CACLC,KADK,UAGP5C,IAAK,CACH4C,KADG,SAKYC,EAAG,GAELC,EAAG,SAACrH,EAAkBE,QAAmB,IAAnBA,IAAAA,EAAW,MAEhD,MAAe,GAef,OAbAb,EAAKW,EAAS,SAACM,EAAQZ,GAErB,GADAY,EAAS6C,GAAkBzD,EAAKY,GAC5BJ,EAAU,CACZ,IAGIA,EAAAA,EAASR,EAAKY,GAClBgH,EAJAC,EAEE7H,OADAY,YAKFgH,EAAO5H,GAAOY,IAIXgH,KAuCS,SAAC9C,EAAcxE,GAC/B,SAAmBA,EAAS,SAACN,EAAaY,GAUxC,MARA,iBAAWA,IACLA,EAAOkH,YACTlH,EAAOkH,UAAehD,EAAtB,IAA8BlE,EAAOkH,WAGvClH,EAAOmH,UAAezE,EAAUwB,UAAWlE,EAAOmH,UAAYnH,EAAOmH,UAAanH,EAAOnC,MAAQmC,EAAOnC,MAAQ6E,EAAUtD,KAGrH,CACLA,IAAQ8E,EAAQ9E,IAAAA,EAChBY,OAAAA,MAKAoH,EAAW,SACflD,EACArG,EACA6B,EACA2H,EACA/D,EAEA1D,GAYA,YAfAyH,IAAAA,IAAAA,GAAU,QAIR,IAHF/D,IAAAA,EAMA,SAAIrB,EAAS6E,EAAe5C,GAC1BnC,QAAQuF,KAAR,IAAiBpD,EAAkCwC,8BAAAA,EACpD,KACCI,EAAcS,KAAKrD,GApEG,SAACA,EAAcrG,EAAe6B,EAAkB4D,QAAAA,IAAAA,IAAAA,EAExE,SAAA,MAAmBqD,EAAWrD,GAAMuD,OACA,GAEpC9H,EAAKW,EAAS,SAAAM,GACZ,GAAI,iBAAAA,GAA8BA,EAAO4G,MAAO,CAG9C,IAAmBY,EAAGxH,EAAO4G,MAE7B7H,EAAK4H,EAAY,SAAAc,GACf,IAAWb,EAAGtH,EAAIuG,EAAY,CAACrC,EAAWiE,EAAUZ,KAAMW,IAC1D,GAAIZ,EAAO,CACTrE,EAAImF,EAAa,CAACD,EAAUZ,KAAMW,GAAgBZ,GAClDjE,GAAMkD,EAAY,CAACrC,EAAWiE,EAAUZ,KAAMW,IAE9C,IAAYG,EAAGrI,EAAIuG,EAAY,CAACrC,EAAWiE,EAAUZ,MAAO,IACvC,IAAjBrE,EAAKmF,IACPhF,GAAMkD,EAAY,CAACrC,EAAWiE,EAAUZ,aAYlDtE,EAAIsD,EAAY,CAACrC,EAAWqD,EAAM3C,GAAO/F,EAAO,CAC9CN,MAAOA,GACN6J,IAsCHE,CAAkB1D,EAAMrG,EAAO6B,EAAS4D,GAEtByD,EAACrH,EAAS,SAACN,EAAaY,GAOxC,OANAA,EAAO4G,MAAQ5G,EAAO4G,MAAW1C,EAAlB,IAA0BlE,EAAO4G,MAAU1C,EAEtDtE,GACFA,EAASR,EAAKY,GAGT,CACLZ,IAAKiI,EAAanD,EAAN,IAAc9E,EAAQA,EAClCY,OAAAA,MAgLN,MAAO,CACL6H,UAAAA,EACAC,WA7KiB,SAAC5D,EAAcrG,EAAe6B,EAAkBqI,EAAmCV,GAEpG,YAFiEU,IAAAA,GAA4B,QAAOV,IAAAA,IAAAA,GAAU,GAE1GnH,EAAIR,aACN,MAAM,UAAsBwE,YAAAA,EAC7B,oDAYD,OAVAxE,EAAUvB,EAAO,CACf4J,QAASlF,GAA6BkF,UAAAA,IACrCrI,GAEO0H,EAASlD,EAAMrG,EAAO6B,EAAS2H,EAAvB,QAAyC,SAACjI,EAAKY,GAC/D,YAAIZ,GAC4BmD,oBAAAA,EAAIvC,cAAwBkE,EAAzB,eAkKrCkD,SAAAA,EACAY,OAlDa,SAACnK,EAAe6B,GAE7B,IAAUwE,EAAMwC,EAAcvE,IAAAA,EAAUtE,GAExC,OAAeuJ,EAAClD,EAAMrG,EAAO6B,GAAS,EACvC,QA8CCuI,SAtJe,SACf7I,EAEAQ,GAQA,IAAUsI,EAAY,KAED9I,eAEN+I,EAAGzF,EAAUtD,GAEnBvB,EAAGsK,EA+EZ,OA7EAD,EAAOE,UAAY,CACjBpF,SAAS,EACTnF,MAAK,UACLsJ,UAAcgB,EAAL,aACTE,aAAY,YAGdH,EAAOI,SAAW,CAChBtF,SAAS,EACTnF,MAAK,WACLsJ,UAAcgB,EAAL,cACTjB,UAAWA,EACXmB,aALgB,YAQlBH,EAAOK,SAAW,CAChBvF,SAAS,EACTnF,MAFgB,WAGhBsJ,UAAcgB,EAHE,cAIhBjB,UAAWA,EACXmB,aAAY,YAGdH,EAAOM,aAAe,CACpBxF,SAAS,EACTnF,MAFoB,YAGpBsJ,UAAcgB,EAHM,eAIpBjB,UAAWA,EACXmB,aALoB,YAQtBH,EAAOO,QAAU,CACfzF,QADe,GAEfnF,MAAK,UACLsJ,UAAcgB,EAAL,aACTjB,UAAWA,EACXmB,aALe,aAQbzI,GA8BFA,GAAYA,EAAS,CACnB8I,OA7B4C,SAACtJ,EAAKY,GAElD,GAAIE,EAAIgI,EAAQ9I,GACd,MAAM,UAAmBA,SAAAA,sBAG3B,MAAqB6D,GAAY7D,EAAKY,EAAQ,CAC5CkH,UAAWA,EACXmB,aAAY,cAGdM,EAAaxB,UAAegB,EAAeQ,MAAAA,EAAa9K,MAExDqK,EAAO9I,GAAOuJ,GAiBdC,OAd4C,SAACxJ,EAAKY,GAClDsC,EAAM4F,EAAO9I,GAAMyD,GAAkBzD,EAAKY,GAAQ,KAclD6I,OAX+C,SAAAzJ,YACjCA,IAWd0J,YARoD,SAAAC,GACpDlL,EAAQkL,KAWL3B,EAAShI,EAAKvB,EAAOqK,GAAQ,IAuDpCc,cAvCoB,SAAC9E,EAAc+E,GAEnC,IAAavJ,EAAG,GA0BhB,GAxBIuJ,EAAQC,OACVxJ,EAAO,GAAQ,CACbsD,QAASiG,EAAQC,KACjBrL,MAFa,YAGbuF,KAAI,2BAIJ6F,EAAQE,MACVzJ,EAAO,GAAQ,CACbsD,QAASiG,EAAQE,IACjBtL,MAFa,WAGbuF,KAHa,yBAOb6F,EAAQG,OACV1J,EAAA,MAAmB,CACjBsD,QAASiG,EAAQG,KACjBvL,MAAK,YACLuF,KAAI,8BAIJZ,EAAK9C,GACP,OAAgBmI,EAAC3D,EAAMxE,KA2BP2J,CAAWxD,EAAYzG,EAAKa,GAExCA,IACF1B,EAAUJ,EAAOI,EAAS,CACxB0B,SAAUA,KAId,MAAqBuG,EAAoBC,GACzC,GAAIjE,EAAK8G,GAAe,CAEtB,MAAmBhK,EAAIuG,EAAY,CAACzG,EAAd,cAAkC,IACxDmK,EAAWhC,KAAKtH,GAChBsC,EAAIsD,EAAY,CAACzG,gBAAoBmK,GA3UV,SAAChH,EAAc7C,EAAkBnB,GAClE+D,EAAMC,EATmB,SAACA,EAAc7C,EAAkBnB,GAC1D,OAAOgF,GAAa7D,EAASnB,EAAS,SAACa,GACrC,GAAIc,EAAIqC,EAAKnD,GACX,MAAM,UAA6BA,mBAAAA,EACpC,OAKQoK,CAAmBjH,EAAK7C,EAASnB,IA4UtCkL,CAA2B/J,EAAS4J,EAAc/K,KAKpD8F,EAKEb,EALFa,WACAqF,EAIElG,EAJFkG,YACAC,EAGEnG,EAHFmG,YACAC,EAEEpG,EAFFoG,gBACAC,EACErG,EADFqG,MAGExF,EACFkC,EAA6BlC,IAGzBsF,GACFpD,EAA6BoD,EAAD,WAG1BC,GACFrD,EAA6BqD,EAC9B,eAEGC,GACFtD,EAA6BsD,EAAD,MAG1BH,GACFnD,EAA6BmD,EAC9B,cAIE,CACLhK,QAAAA,EACAmG,WAAAA,IAkJAvD,EAAM/D,EAAS,CACbmB,QAFFoK,EAAkBpK,QAGhBmG,WAHIA,EAAAA,aApByH,GAKjI,OAAAF,GAAAA,EAAAF,KAAAE,EAAAF,KAAAsE,GAAAA,IAAA,MAAwB,CACtB7F,KAAAA,EACArG,MAAAA,GAP+H,OAAAuG,EAAA4F,QAAAC,QAUpF7F,KAVoFqB,KAAAZ,GAAAA,EAUlE,MAVkE,SAGlGN,QAAAA,QAAAA,KAHkGkB,KAAAb,GAAAA,EAGrFlC,EAAUwB,KAH2E,OAAA8F,QAAAC,QAEpHzF,EAAgBA,QAAAA,QAAAA,KAFoGiB,KAAAyE,GAAAA,EAExFvF,IAF1B,MAAjBwF,GAAA,OAAAH,QAAAI,OAAAD,yCA0CE,SAAYxF,EAAAA,EAAQ0F,GAClB,IAAAC,EADuB,OACvBA,EAAAC,EAAAC,KAAAC,KAASJ,EAAMzI,QAAa+C,MAAAA,sBACvBT,KAFkB,cAAAoG,yFAFDvH,gBAAAA,EAAAA,QCxoBF2H,GAAA,SAAU/F,EAAgBgG,GAAwB,IAAA,OAAAX,QAAAC,QAE7C9F,GACzBQ,EAAAA,CAAAA,OAAAA,GACGgG,KAJmElF,KAAA,SAElEmF,GAKN,OAAmBA,EAAClL,UAPE,MAAxByK,GAAA,OAAAH,QAAAI,OAAAD"}