{"version":3,"file":"index.cjs","sources":["../src/constants/CATEGORIES.ts","../src/fetchConfigs/transformationOptions.ts","../src/fetchConfigs/transformToNested.ts","../src/fetchConfigs/transformResponse.ts","../src/fetchConfigs/transformToConfigValues.ts","../src/createConfigsFromJson.ts","../src/parseSource/parseSource.ts","../src/parseSource/parseSourceConfigs.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum ConfigCategory {\n  Setting = `setting`,\n  Translation = `translation`,\n  UI = `ui`,\n  Feature = `feature`\n}\n\nexport enum ConfigCategoryPlurals {\n  Setting = `settings`,\n  Translation = `translations`,\n  UI = `ui`,\n  Feature = `features`\n}\n\n/* eslint-enable: no-unused-vars */\nconst CATEGORIES = {\n  [ConfigCategory.Setting]: {\n    plural: ConfigCategoryPlurals.Setting,\n    label: `Setting`,\n    labelPlural: `Settings`,\n    order: 1,\n  },\n  [ConfigCategory.Translation]: {\n    plural: ConfigCategoryPlurals.Translation,\n    label: `Translation`,\n    labelPlural: `Translations`,\n    order: 2,\n  },\n  [ConfigCategory.UI]: {\n    plural: ConfigCategoryPlurals.UI,\n    label: `UI`,\n    labelPlural: `UI`,\n    order: 3,\n  },\n  [ConfigCategory.Feature]: {\n    plural: ConfigCategoryPlurals.Feature,\n    label: `Feature`,\n    labelPlural: `Features`,\n    order: 4,\n  },\n}\n\nexport { CATEGORIES }\n","import lodash from 'lodash'\n\nconst { assign, mapValues } = lodash\n\nexport type TransformationOptions = {\n  nested: boolean,\n  categorized: boolean,\n}\n\nconst getTransformationOptions = (options: Partial<TransformationOptions> = {}): TransformationOptions => {\n\n  options = mapValues(options, () => true)\n\n  const opts: TransformationOptions = {\n    nested: false,\n    categorized: false,\n  }\n\n  return assign(opts, options)\n}\n\nexport { getTransformationOptions }\n","import lodash from 'lodash'\n\nconst { each, setWith } = lodash\n\nconst transformToNested = object => {\n\n  const transformed = {}\n\n  each(object, (value, key) => {\n    setWith(transformed, key, value, Object)\n  })\n\n  return transformed\n}\n\nexport { transformToNested }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get } = lodash\n\nconst helpTransformResponse = (response, callback = null) => {\n\n  const transformed = {}\n\n  each(response, (value, key) => {\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, value)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    transformed[key] = value\n  })\n\n  return transformed\n}\n\nconst transformResponse = (response, opts = {}, configs = null) => {\n\n  const options = getTransformationOptions(opts)\n\n  const transformed = helpTransformResponse(response, key => {\n\n    if (options.categorized) {\n\n      const config = get(configs, key)\n\n      if (config) {\n        key = `${CATEGORIES[config.category].plural}.${key}`\n      }\n    }\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(transformed)\n  }\n\n  return transformed\n}\n\nexport { transformResponse }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, has } = lodash\n\nconst transformFromConfigsToResponse = (configs, callback = null) => {\n\n  const response = {}\n\n  each(configs, (config, key) => {\n\n    let value = has(config, `value`) ? config.value : config.default\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, config)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    response[key] = value\n  })\n\n  return response\n}\n\nconst transformToConfigValues = (configs, opts = {}) => {\n\n  const options = getTransformationOptions(opts)\n\n  const response = transformFromConfigsToResponse(configs, (key, config) => {\n\n    key = options.categorized ? `${CATEGORIES[config.category].plural}.${key}` : key\n\n    return {\n      key,\n    }\n  })\n\n  if (options.nested) {\n    return transformToNested(response)\n  }\n\n  return response\n}\n\nexport { transformToConfigValues }\n","import lodash from 'lodash'\n\nimport type {\n  Config,\n  StandardizedConfigs,\n} from './types'\n\nconst { each, isBoolean, isObject, last, split, startsWith, trimEnd } = lodash\n\n/**\n * TODO: This function doesn't know how to handle configs with an empty array value (preSelectedNewsletters) and the config will just be ignored\n */\nconst flattenJsonObject = (object: object, initialPathPrefix: string = ``) => {\n\n  function flatten(object, initialPathPrefix) {\n    if (!object || typeof object !== `object`) {\n      return [{ [initialPathPrefix]: object }]\n    }\n\n    const prefix = initialPathPrefix\n      ? Array.isArray(object)\n        ? initialPathPrefix\n        : `${initialPathPrefix}.`\n      : ``\n\n    return Object.keys(object)\n      .flatMap((key) =>\n        flatten(\n          object[key],\n          Array.isArray(object) ? `${prefix}[${key}]` : `${prefix}${key}`,\n        ),\n      )\n      .reduce((acc, path) => ({ ...acc, ...path }), [])\n  }\n\n  const flattenedObject = flatten(object, initialPathPrefix)\n\n  const configs = {}\n  each(flattenedObject, (value, key) => {\n    const splitKey = split(key, `.`)\n    const lastPart = last(splitKey)\n    if (startsWith(lastPart, `#`)) {\n      if (lastPart === `#value`) {\n        configs[trimEnd(key, `.#value`)] = value\n      }\n    } else {\n      configs[key] = value\n    }\n  })\n\n  return configs\n}\n\nconst createConfigsFromJson = (json: object): StandardizedConfigs => {\n\n  const configs = {}\n\n  const flattenJson = flattenJsonObject(json)\n\n  each(flattenJson, (value, key) => {\n\n    let defaultValue = value\n    if (isObject(value)) {\n      defaultValue = value[`#value`]\n    }\n\n    const config: Config = {\n      default: defaultValue,\n    }\n\n    if (isBoolean(defaultValue)) {\n      config.type = `switch`\n    }\n\n    configs[key] = config\n  })\n\n  return configs\n}\n\nexport { createConfigsFromJson }\n","import lodash from 'lodash'\n\nimport type { Component, ComponentOptions, Components, Config, ConfigObject, Configs, Onboarder, Onboarders, OnboarderTabs, Source, StandardizedConfigs } from '../types'\n\nconst { assign, each, get, has, includes, isObject, kebabCase, last, mapKeys, mapValues, merge, set, size, split, startCase, unset } = lodash\n\nexport type SourceConfigs = {\n  getComponents?: () => Promise<Components>,\n  getOnboarders?: () => Promise<Onboarder>,\n  getConfigs?: () => Promise<Configs>,\n  getLabel?: () => string | Promise<string | undefined>,\n  getName?: () => string | Promise<string | undefined>,\n  source?: string\n}\n\n// TODO: HelperFunctions is deprecated\nexport type HelperFunctions = ReturnType<typeof getHelpers>\nexport type Context = ReturnType<typeof getHelpers>\n\nexport type Definitions = {\n  [key: string]: DefinitionComponent\n}\n\n/* eslint-disable no-unused-vars */\nexport type DefinitionComponent = {\n  getConfigs?: (_: HelperFunctions) => Configs\n  getSettings?: (_: HelperFunctions) => Configs\n  getTranslations?: (_: HelperFunctions) => Configs\n  getUI?: (_: HelperFunctions) => Configs,\n  getFeatures?: (_: HelperFunctions) => Configs,\n  getOptions?: () => Component\n}\n\n/* eslint-enable no-unused-vars */\n\nconst getType = (config: Config) => {\n  if (typeof config === `object`) {\n    switch (typeof config.default) {\n      case `boolean`:\n        return `switch`\n    }\n  }\n\n  return `input`\n}\n\nconst standardizeConfig = (key: string, config: Config, skipDefaultCheck = false) => {\n\n  if (isObject(config)) {\n    if (!skipDefaultCheck && !has(config, `default`)) {\n      throw new Error(`Config \"${key}\" is missing a \"default\" value.`)\n    }\n  } else {\n    config = {\n      default: config,\n    }\n  }\n\n  return config as ConfigObject\n}\n\nconst parseConfig = (key: string, config: Config, options: Partial<ConfigObject> = {}) => {\n\n  config = standardizeConfig(key, config)\n\n  delete config.key\n\n  if (config.docLink) {\n    const docLinkText = `Documentation on this feature can be found <a href=\"${config.docLink}\">here</a>.`\n    config.hint = config.hint ? docLinkText + `<br>${config.hint}` : docLinkText\n    delete config.docLink\n  }\n\n  return assign({\n    default: null, // This is placed here so that `default` appears as first property\n    type: getType(config),\n    label: startCase(last(split(key, `.`))),\n    category: `setting`,\n  } as ConfigObject, config, options) as ConfigObject\n}\n\nconst parseConfigs = (\n  configs: Configs,\n  options: Partial<ConfigObject> = {},\n  // eslint-disable-next-line no-unused-vars\n  callback?: (key: string, config: Config) => void,\n) => {\n\n  configs = mapKeys(configs, (config: Config, key: string) => {\n    return lodash.get(config, `key`, key)\n  })\n\n  return mapValues(configs, (config: Config, key: string) => {\n\n    callback && callback(key, config)\n\n    return parseConfig(key, config, options)\n  }) as StandardizedConfigs\n}\n\nconst parseUniqueConfigs = (set: Configs, configs: Configs, options: Partial<ConfigObject>) => {\n  return parseConfigs(configs, options, (key) => {\n    if (has(set, key)) {\n      throw new Error(`Duplicate key: \"${key}\"`)\n    }\n  })\n}\n\nconst parseConfigsIntoCollection = (set: Configs, configs: Configs, options: Partial<ComponentOptions>) => {\n  merge(set, parseUniqueConfigs(set, configs, options))\n}\n\nconst getHelpers = (components: Components, component: string, helperType: string = `setting`) => {\n\n  const groupTypes = {\n    group: {\n      path: `groups`,\n    },\n    tab: {\n      path: `tabs`,\n    },\n  }\n\n  const trackedGroups = []\n\n  const walkConfigs = (configs: Configs, callback = null) => {\n\n    const walked = {}\n\n    each(configs, (config, key) => {\n      config = standardizeConfig(key, config)\n      if (callback) {\n        const {\n          config: newConfig,\n          key: newKey,\n        } = callback(key, config)\n        walked[newKey] = newConfig\n      } else {\n        walked[key] = config\n      }\n    })\n\n    return walked\n  }\n\n  const setComponentGroup = (name: string, label: string, configs: Configs, type = `group`) => {\n\n    let path: string = groupTypes[type].path\n    let replacement: ComponentOptions = {}\n\n    each(configs, config => {\n      if (typeof config === `object` && config.group) {\n\n        // TODO: This variable should handle cases where group value is deeply nested\n        const groupExpanded = config.group\n\n        each(groupTypes, groupType => {\n          const group = get(components, [component, groupType.path, groupExpanded])\n          if (group) {\n            set(replacement, [groupType.path, groupExpanded], group)\n            unset(components, [component, groupType.path, groupExpanded])\n\n            const holder = get(components, [component, groupType.path], {})\n            if (size(holder) === 0) {\n              unset(components, [component, groupType.path])\n            }\n          }\n        })\n      }\n    })\n\n    // TODO: Need to think about this more\n    // if (has(components, [component, path, name])) {\n    //   throw new Error(`Duplicate ${type}: \"${name}\"`)\n    // }\n\n    set(components, [component, path, name], assign({\n      label: label,\n    }, replacement))\n  }\n\n  const addNested = (name: string, configs: Configs) => {\n    return walkConfigs(configs, (key: string, config: Config) => {\n\n      if (typeof config === `object`) {\n        if (config.visibleIf) {\n          config.visibleIf = `${name}.${config.visibleIf}`\n        }\n\n        config.longLabel = `${startCase(name)} ⇢ ${config.longLabel ? config.longLabel : (config.label ? config.label : startCase(key))}`\n      }\n\n      return {\n        key: `${name}.${key}`,\n        config,\n      }\n    })\n  }\n\n  const addGroup = (\n    name: string,\n    label: string,\n    configs: Configs,\n    nesting = true,\n    type = `group`,\n    /* eslint-disable-next-line no-unused-vars */\n    callback?: (_: string, _2: Config) => void,\n  ) => {\n\n    // TODO: Eventually store a running list of problems so you can see a count of the issues\n    if (includes(trackedGroups, name)) {\n      console.warn(`\"${name}\" group already exists in \"${helperType}\"`)\n    } else {\n      trackedGroups.push(name)\n    }\n\n    setComponentGroup(name, label, configs, type)\n\n    return walkConfigs(configs, (key: string, config: ConfigObject) => {\n      config.group = config.group ? `${name}.${config.group}` : name\n\n      if (callback) {\n        callback(key, config)\n      }\n\n      return {\n        key: nesting ? `${name}.${key}` : key,\n        config,\n      }\n    })\n  }\n\n  const addFeature = (name: string, label: string, configs: Configs, enabled: boolean | Config = false, nesting = true) => {\n\n    if (has(configs, `enabled`)) {\n      throw new Error(`Feature \"${name}\" should not contain a property named \"enabled\".`)\n    }\n\n    configs = assign({\n      enabled: standardizeConfig(`enabled`, enabled),\n    }, configs)\n\n    configs = addGroup(name, label, configs, nesting, `group`, (key, config) => {\n      if (key !== `enabled`) {\n        typeof config === `object` && lodash.set(config, `visibleIf`, `${name}.enabled`)\n      }\n    })\n\n    return configs as StandardizedConfigs\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  type AddFieldCallbackInnerFuncType = (key: string, config: Config) => void\n  // eslint-disable-next-line no-unused-vars\n  type ModifyLabelCallbackInnerFuncType = (key: string) => void\n\n  const addField = (\n    key: string,\n    // eslint-disable-next-line no-unused-vars\n    callback?: (arg: {\n      insert: AddFieldCallbackInnerFuncType,\n      modify: AddFieldCallbackInnerFuncType,\n      modifyLabel: ModifyLabelCallbackInnerFuncType,\n    }) => void,\n  ) => {\n\n    let fields: Configs = {}\n\n    const visibleIf = `${key}.isVisible`\n\n    const prettyKey = startCase(key)\n\n    let label = prettyKey\n\n    fields.isVisible = {\n      default: true,\n      label: `Visible`,\n      longLabel: `${prettyKey} ⇢ Visible`,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.required = {\n      default: false,\n      label: `Required`,\n      longLabel: `${prettyKey} ⇢ Required`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.disabled = {\n      default: false,\n      label: `Disabled`,\n      longLabel: `${prettyKey} ⇢ Disabled`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.readonly = {\n      default: false,\n      label: `Readonly`,\n      longLabel: `${prettyKey} ⇢ Readonly`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.hasAutoFocus = {\n      default: false,\n      label: `Autofocus`,\n      longLabel: `${prettyKey} ⇢ Autofocus`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.pattern = {\n      default: ``,\n      label: `Pattern`,\n      longLabel: `${prettyKey} ⇢ Pattern`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-12`,\n    }\n\n    if (callback) {\n\n      const insert: AddFieldCallbackInnerFuncType = (key, config) => {\n\n        if (has(fields, key)) {\n          throw new Error(`Field ${key} already exists!`)\n        }\n\n        const parsedConfig = parseConfig(key, config, {\n          visibleIf: visibleIf,\n          styleClasses: `col-md-12`,\n        })\n\n        parsedConfig.longLabel = `${prettyKey} ⇢ ${parsedConfig.label}`\n\n        fields[key] = parsedConfig\n      }\n\n      const modify: AddFieldCallbackInnerFuncType = (key, config) => {\n        merge(fields[key], standardizeConfig(key, config, true))\n      }\n\n      const modifyLabel: ModifyLabelCallbackInnerFuncType = newLabel => {\n        label = newLabel\n      }\n\n      callback && callback({\n        insert,\n        modify,\n        modifyLabel,\n      })\n    }\n\n    return addGroup(key, label, fields, true)\n  }\n\n  const addTab = (label: string, configs: Configs) => {\n\n    const name = `${helperType}-${kebabCase(label)}`\n\n    return addGroup(name, label, configs, false, `tab`)\n  }\n\n  type Pluralized = {\n    zero: string,\n    one: string,\n    many: string,\n  }\n\n  const addPluralized = (name: string, plurals: Pluralized) => {\n\n    const configs = {}\n\n    if (plurals.zero) {\n      configs[`0`] = {\n        default: plurals.zero,\n        label: `Zero Case`,\n        hint: `When there are 0 items`,\n      }\n    }\n\n    if (plurals.one) {\n      configs[`1`] = {\n        default: plurals.one,\n        label: `One Case`,\n        hint: `When there is 1 item`,\n      }\n    }\n\n    if (plurals.many) {\n      configs[`other`] = {\n        default: plurals.many,\n        label: `Many Case`,\n        hint: `When there are many items`,\n      }\n    }\n\n    if (size(configs)) {\n      return addNested(name, configs)\n    }\n  }\n\n  return {\n    addNested,\n    addFeature,\n    addGroup,\n    addTab,\n    addField,\n    addPluralized,\n  }\n}\n\nconst parseConfigsAndComponents = (definitions: Definitions) => {\n\n  const configs: Configs = {}\n  const components = parseComponents(definitions)\n\n  each(definitions, (component, key) => {\n\n    const helpParseConfigsWithCategory = (getCategoryFunction, category = `setting`) => {\n\n      let options: Partial<ConfigObject> = {\n        component: key,\n      }\n\n      const helpers = getHelpers(components, key, category)\n\n      if (category) {\n        options = assign(options, {\n          category: category,\n        })\n      }\n\n      const theseConfigs = getCategoryFunction(helpers)\n      if (size(theseConfigs)) {\n\n        const categories = get(components, [key, `categories`], [])\n        categories.push(category)\n        set(components, [key, `categories`], categories)\n\n        parseConfigsIntoCollection(configs, theseConfigs, options)\n      }\n    }\n\n    const {\n      getConfigs,\n      getFeatures,\n      getSettings,\n      getTranslations,\n      getUI,\n    } = component\n\n    if (getConfigs) {\n      helpParseConfigsWithCategory(getConfigs)\n    } else {\n\n      if (getSettings) {\n        helpParseConfigsWithCategory(getSettings, `setting`)\n      }\n\n      if (getTranslations) {\n        helpParseConfigsWithCategory(getTranslations, `translation`)\n      }\n\n      if (getUI) {\n        helpParseConfigsWithCategory(getUI, `ui`)\n      }\n\n      if (getFeatures) {\n        helpParseConfigsWithCategory(getFeatures, `feature`)\n      }\n    }\n  })\n\n  return {\n    configs,\n    components,\n  }\n}\n\nconst parseComponent = (key: string, component?: ComponentOptions) => {\n  return assign({\n    label: startCase(last(split(key, `.`))),\n    order: 0,\n    toggleable: false,\n    description: null,\n    rootKey: null,\n  }, component) as ComponentOptions\n}\n\nconst parseComponents = (components: Components) => {\n  return mapValues(components, (component, key: string) => {\n    const { getOptions } = component\n\n    return parseComponent(key, getOptions ? getOptions() : null)\n  }) as Components\n}\n\nconst parseComponentsFromConfigs = (configs: Configs, structure: Components = {}) => {\n\n  // TODO: Place all these types in the \"types\" directory\n  const components: Components = {}\n\n  let hasUnsorted = false\n\n  each(configs, config => {\n    if (typeof config === `object` && has(config, `component`)) {\n      if (!has(components, config.component)) {\n\n        let options = {}\n        if (has(structure, config.component)) {\n          const { getOptions } = structure[config.component]\n          options = getOptions ? getOptions() : structure[config.component]\n        }\n\n        components[config.component] = parseComponent(config.component, options)\n      }\n    } else {\n      hasUnsorted = true\n    }\n  })\n\n  if (hasUnsorted && size(components)) {\n    components.unsorted = parseComponent(`unsorted`, {\n      order: 999,\n    })\n  }\n\n  return components\n}\n\nconst standardizeConfigs = (configs: Configs, sourceConfigs): StandardizedConfigs => {\n\n  const standardizedConfigs = {}\n\n  each(configs, config => {\n\n    if (isObject(config) && !has(config, `key`)) {\n      throw new Error(`Onboarder config missing key!`)\n    }\n\n    const key: any = isObject(config) ? config.key : config\n\n    if (!has(sourceConfigs, key)) {\n      throw new Error(`Onboarder defines key \"${key}\" which does not exist.`)\n    }\n\n    if (isObject(config)) {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key], config)\n    } else {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key])\n    }\n  })\n\n  return standardizedConfigs\n}\n\nconst parseOnboarderTabs = (tabs, configs): OnboarderTabs => {\n\n  const parsedOnboardersTabs = {}\n\n  each(tabs, (tab, name) => {\n\n    parsedOnboardersTabs[name] = {\n      label: tab.label ? tab.label : startCase(name),\n      configs: standardizeConfigs(tab.configs, configs),\n    }\n  })\n\n  return parsedOnboardersTabs\n}\n\nconst parseOnboarders = (onboarders, configs): Onboarders => {\n\n  const parsedOnboarders = {}\n\n  each(onboarders, ({ getLabel, getTabs }, name) => {\n\n    parsedOnboarders[name] = {\n      label: getLabel ? getLabel() : startCase(name),\n      tabs: getTabs ? parseOnboarderTabs(getTabs(), configs) : {},\n    }\n  })\n\n  return parsedOnboarders\n}\n\nconst parseSource = async ({ getComponents, getConfigs, getLabel, getName, getOnboarders, source }: SourceConfigs) => {\n\n  const name = getName ? await getName() : source\n  const label = getLabel ? await getLabel() : startCase(name)\n\n  const options: Source = {\n    name,\n    label,\n  }\n\n  const grabComponents = getComponents ? await getComponents() : null\n\n  if (getConfigs) {\n    const configs = parseConfigs(await getConfigs())\n    const components = parseComponentsFromConfigs(configs, grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  } else {\n    let { components, configs } = parseConfigsAndComponents(grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  }\n\n  if (getOnboarders) {\n    options.onboarders = parseOnboarders(await getOnboarders(), options.configs)\n  }\n\n  return options\n}\n\nclass SourceError extends Error {\n\n  constructor(source, error) {\n    super(`${error.message} (\"${source}\" source)`)\n    this.name = `SourceError`\n  }\n}\n\nexport { parseSource, SourceError }\n","import { parseSource, SourceConfigs } from './parseSource'\n\nconst parseSourceConfigs = async (source: string, stack: SourceConfigs) => {\n\n  const parsedSource = await parseSource({\n    source,\n    ...stack,\n  })\n\n  return parsedSource.configs\n}\n\nexport { parseSourceConfigs }\n"],"names":["_CATEGORIES","ConfigCategory","ConfigCategoryPlurals","CATEGORIES","Setting","plural","label","labelPlural","order","Translation","UI","Feature","assign","lodash","mapValues","getTransformationOptions","options","nested","categorized","each","setWith","transformToNested","object","transformed","value","key","Object","get","has","isBoolean","isObject","last","split","startsWith","trimEnd","includes","kebabCase","mapKeys","merge","set","size","startCase","unset","getType","config","standardizeConfig","skipDefaultCheck","Error","default","parseConfig","docLink","docLinkText","hint","type","category","parseConfigs","configs","callback","parseComponent","component","toggleable","description","rootKey","standardizeConfigs","sourceConfigs","standardizedConfigs","parseOnboarderTabs","tabs","parsedOnboardersTabs","tab","name","parseSource","getComponents","_ref2","getConfigs","getLabel","getName","getOnboarders","source","_temp5","_temp4","grabComponents","then","_getOnboarders","onboarders","getTabs","_ref","parsedOnboarders","_temp","_getConfigs","components","structure","hasUnsorted","getOptions","unsorted","parseComponentsFromConfigs","definitions","_parseConfigsAndCompo","parseComponents","getCategoryFunction","helperType","groupTypes","group","path","trackedGroups","walkConfigs","walked","_callback","addNested","visibleIf","longLabel","nesting","console","warn","push","groupExpanded","groupType","replacement","holder","setComponentGroup","addFeature","enabled","addGroup","addTab","addField","fields","prettyKey","isVisible","styleClasses","required","disabled","readonly","hasAutoFocus","pattern","insert","parsedConfig","modify","modifyLabel","newLabel","addPluralized","plurals","zero","one","many","getHelpers","helpers","theseConfigs","categories","parseUniqueConfigs","parseConfigsIntoCollection","getFeatures","getSettings","getTranslations","getUI","helpParseConfigsWithCategory","_temp2","_temp3","Promise","resolve","e","reject","_Error","SourceError","error","_this","message","this","json","flattenJson","initialPathPrefix","flattenedObject","flatten","prefix","Array","isArray","keys","flatMap","reduce","acc","_extends","splitKey","lastPart","flattenJsonObject","defaultValue","stack","parsedSource","response","opts","newKey","newValue","helpTransformResponse","transformFromConfigsToResponse"],"mappings":"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"}