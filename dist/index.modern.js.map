{"version":3,"file":"index.modern.js","sources":["../src/constants/CATEGORIES.ts","../src/fetchConfigs/transformationOptions.ts","../src/sortObjectAlphabetically.ts","../src/fetchConfigs/transformToNested.ts","../src/fetchConfigs/transformResponse.ts","../src/fetchConfigs/transformToConfigValues.ts","../src/getDiff.ts","../src/logMemoryUsage.ts","../src/parseSource/parseSource.ts","../src/parseSource/parseSourceConfigs.ts","../src/parseSource/validateSources.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum ConfigCategory {\n  Setting = `setting`,\n  Translation = `translation`,\n  UI = `ui`,\n  Feature = `feature`\n}\n\nexport enum ConfigCategoryPlurals {\n  Setting = `settings`,\n  Translation = `translations`,\n  UI = `ui`,\n  Feature = `features`\n}\n\n/* eslint-enable: no-unused-vars */\nconst CATEGORIES = {\n  [ConfigCategory.Setting]: {\n    plural: ConfigCategoryPlurals.Setting,\n    label: `Setting`,\n    labelPlural: `Settings`,\n    order: 1,\n  },\n  [ConfigCategory.Translation]: {\n    plural: ConfigCategoryPlurals.Translation,\n    label: `Translation`,\n    labelPlural: `Translations`,\n    order: 2,\n  },\n  [ConfigCategory.UI]: {\n    plural: ConfigCategoryPlurals.UI,\n    label: `UI`,\n    labelPlural: `UI`,\n    order: 3,\n  },\n  [ConfigCategory.Feature]: {\n    plural: ConfigCategoryPlurals.Feature,\n    label: `Feature`,\n    labelPlural: `Features`,\n    order: 4,\n  },\n}\n\nexport { CATEGORIES }\n","import lodash from 'lodash'\n\nconst { assign, mapValues } = lodash\n\nexport type TransformationOptions = {\n  nested: boolean,\n  categorized: boolean,\n  sort: boolean,\n}\n\nconst getTransformationOptions = (options: Partial<TransformationOptions> = {}): TransformationOptions => {\n\n  options = mapValues(options, () => true)\n\n  const opts: TransformationOptions = {\n    nested: false,\n    categorized: false,\n    sort: false, // TODO: In EDGE, we may want to be more flexible and allow a string value for `sort` to support different sorting methods\n  }\n\n  return assign(opts, options)\n}\n\nexport { getTransformationOptions }\n","import lodash from 'lodash'\n\nconst { fromPairs, sortBy, toPairs } = lodash\n\nconst sortObjectAlphabetically = object => {\n  return fromPairs(sortBy(toPairs(object), 0)) as object\n}\n\nexport { sortObjectAlphabetically }\n","import lodash from 'lodash'\n\nconst { each, setWith } = lodash\n\nconst transformToNested = object => {\n\n  const transformed = {}\n\n  each(object, (value, key) => {\n    setWith(transformed, key, value, Object)\n  })\n\n  return transformed\n}\n\nexport { transformToNested }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { sortObjectAlphabetically } from '../sortObjectAlphabetically'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get } = lodash\n\nconst helpTransformResponse = (response, callback = null) => {\n\n  const transformed = {}\n\n  each(response, (value, key) => {\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, value)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    transformed[key] = value\n  })\n\n  return transformed\n}\n\nconst transformResponse = (response, opts = {}, configs = null) => {\n\n  const options = getTransformationOptions(opts)\n\n  let transformed = response\n\n  if (options.sort) {\n    transformed = sortObjectAlphabetically(transformed)\n  }\n\n  if (options.categorized) {\n\n    transformed = helpTransformResponse(transformed, key => {\n\n      const config = get(configs, key)\n\n      if (config) {\n        key = `${CATEGORIES[config.category].plural}.${key}`\n      } else {\n        console.warn(`Non-existent key ${key} is not part of the config set.`)\n        key = `nonexistent.${key}`\n      }\n\n      return {\n        key,\n      }\n    })\n  }\n\n  if (options.nested) {\n    return transformToNested(transformed)\n  }\n\n  return transformed\n}\n\nexport { transformResponse }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get, has } = lodash\n\nconst transformFromConfigsToResponse = (configs, callback = null, defaultsOnly = false) => {\n\n  const response = {}\n\n  each(configs, (config, key) => {\n    // Set inherited values\n    if (config.inherit) {\n      config.default = get(configs, config.inherit).default\n    }\n    // TODO: Figure out why configs have value properties when a configuration is saved but not published\n    let value = has(config, `value`) && !defaultsOnly ? config.value : config.default\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, config)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    response[key] = value\n  })\n\n  return response\n}\n\nconst transformToConfigValues = (configs, opts = {}, defaultsOnly = false) => {\n\n  const options = getTransformationOptions(opts)\n\n  const response = transformFromConfigsToResponse(configs, (key, config) => {\n\n    key = options.categorized ? `${CATEGORIES[config.category].plural}.${key}` : key\n\n    return {\n      key,\n    }\n  }, defaultsOnly)\n\n  if (options.nested) {\n    return transformToNested(response)\n  }\n\n  return response\n}\n\nexport { transformFromConfigsToResponse, transformToConfigValues }\n","import lodash from 'lodash'\n\nconst { differenceWith, each, fromPairs, has, isEqual, pickBy, toPairs } = lodash\n\nconst getDiffByStatus = (object1, object2): object => {\n  const changes = fromPairs(differenceWith(toPairs(object2), toPairs(object1), isEqual)) as object\n\n  const added = pickBy(changes, (value, key) => {\n    return !has(object1, key)\n  })\n\n  const changed = pickBy(changes, (value, key) => {\n    return has(object1, key)\n  })\n\n  const reverseChanges = fromPairs(differenceWith(toPairs(object1), toPairs(object2), isEqual)) as object\n\n  const removed = pickBy(reverseChanges, (value, key) => {\n    return !has(object2, key)\n  })\n\n  return { added: added, changed: changed, removed: removed }\n}\n\nconst getDiff = (object1, object2) => {\n  const diffByStatus = getDiffByStatus(object1, object2)\n\n  const diff = {}\n\n  each(diffByStatus, (value, statusKey) => {\n    each(diffByStatus[statusKey], (value, key) => {\n      diff[key] = {\n        value: value,\n        status: statusKey,\n        previous: has(object1, key) ? object1[key] : null,\n      }\n    })\n  })\n\n  return diff\n}\n\nexport { getDiff, getDiffByStatus }\n","const logMemoryUsage = () => {\n\n  const used = process.memoryUsage()\n\n  let message = `Memory Usage\\n`\n\n  for (let key in used) {\n    message += `${key}: ${Math.round(used[key] / 1024 / 1024 * 100) / 100} MB\\n`\n  }\n\n  console.log(message)\n}\n\nexport { logMemoryUsage }\n\n","import lodash from 'lodash'\n\nimport type {\n  Component,\n  ComponentOptions,\n  Components, Config,\n  ConfigMappings,\n  ConfigObject,\n  Configs,\n  Onboarder,\n  Onboarders,\n  OnboarderTabs,\n  Source,\n  StandardizedConfigs,\n} from '../types'\n\nconst { assign, each, endsWith, get, has, includes, isObject, kebabCase, last, mapKeys, mapValues, merge, set, size, split, startCase, unset } = lodash\n\nexport type SourceConfigs = {\n  getComponents?: () => Promise<Components>,\n  getOverrides?: () => Promise<object>\n  getOnboarders?: () => Promise<Onboarder>,\n  getConfigs?: () => Promise<Configs>,\n  getMappings?: () => Promise<ConfigMappings>,\n  getLabel?: () => string | Promise<string | undefined>,\n  getName?: () => string | Promise<string | undefined>,\n  source?: string\n}\n\n// TODO: HelperFunctions is deprecated\nexport type HelperFunctions = ReturnType<typeof getHelpers>\nexport type Context = ReturnType<typeof getHelpers>\n\nexport type Definitions = {\n  [key: string]: DefinitionComponent\n}\n\n/* eslint-disable no-unused-vars */\nexport type DefinitionComponent = {\n  getConfigs?: (_: HelperFunctions) => Configs\n  getSettings?: (_: HelperFunctions) => Configs\n  getTranslations?: (_: HelperFunctions) => Configs\n  getUI?: (_: HelperFunctions) => Configs,\n  getFeatures?: (_: HelperFunctions) => Configs,\n  getOptions?: () => Component\n}\n\n/* eslint-enable no-unused-vars */\n\nconst getType = (config: ConfigObject) => {\n\n  switch (typeof config.default) {\n  case `boolean`:\n    return `switch`\n  }\n\n  return `input`\n}\n\nconst standardizeConfig = (key: string, config: Config, skipDefaultCheck = false) => {\n\n  if (isObject(config)) {\n    if (!skipDefaultCheck && (!has(config, `default`) && !has(config, `inherit`))) {\n      throw new Error(`Config \"${key}\" is missing a \"default\" value (or \"inherit\" reference).`)\n    }\n  } else {\n    config = {\n      default: config,\n    }\n  }\n\n  return config as ConfigObject\n}\n\nconst parseConfig = (key: string, config: Config, options: Partial<ConfigObject> = {}): ConfigObject => {\n\n  config = standardizeConfig(key, config)\n\n  logWarningsForConfigIfAny(key, config)\n\n  delete config.key\n\n  if (config.docLink) {\n    const docLinkText = `Documentation on this feature can be found <a href=\"${config.docLink}\">here</a>.`\n    config.hint = config.hint ? docLinkText + `<br>${config.hint}` : docLinkText\n    delete config.docLink\n  }\n\n  if (config.inherit) {\n    // TODO: It would be nice to eventually show the value of the config that is being inherited from\n    // as part of the message. (This would involve a DB lookup, so we'll save this for a later time.)\n    const inheritText = `When unchanged, inherits value from <code>${config.inherit}</code>.`\n    config.hint = config.hint ? inheritText + `<br>${config.hint}` : inheritText\n  }\n\n  const defaults = {\n    default: null, // This is placed here so that `default` appears as first property\n    type: getType(config),\n    label: startCase(last(split(key, `.`))),\n    category: `setting`,\n  } as ConfigObject\n\n  return assign(defaults, config, options)\n}\n\nconst logWarningsForConfigIfAny = (key: string, config: ConfigObject) => {\n\n  // This check will help to point out potential configs that should have their inputType set to \"number\"\n  if (!config.inputType && (endsWith(key, `_id`) || endsWith(key, `ID`))) {\n\n    // We can rule out a few cases with a couple of extra checks  \n    if (config.default === `` || config.default === null || !includes([`boolean`, `string`], typeof config.default)) {\n      console.warn(`To remove this warning, set the \"inputType\" on \"${key}\" to \"number\" if its value is meant to be parsed as a number (\"text\" otherwise)`)\n    }\n  }\n}\n\nconst parseConfigs = (\n  configs: Configs,\n  options: Partial<ConfigObject> = {},\n  // eslint-disable-next-line no-unused-vars\n  callback?: (key: string, config: Config) => void,\n) => {\n\n  configs = mapKeys(configs, (config: Config, key: string) => {\n    return get(config, `key`, key)\n  })\n\n  return mapValues(configs, (config: Config, key: string) => {\n\n    callback && callback(key, config)\n\n    return parseConfig(key, config, options)\n  }) as StandardizedConfigs\n}\n\nconst parseUniqueConfigs = (set: Configs, configs: Configs, options: Partial<ConfigObject>) => {\n  return parseConfigs(configs, options, (key) => {\n    if (has(set, key)) {\n      throw new Error(`Duplicate key: \"${key}\"`)\n    }\n  })\n}\n\nconst parseConfigsIntoCollection = (set: Configs, configs: Configs, options: Partial<ComponentOptions>) => {\n  merge(set, parseUniqueConfigs(set, configs, options))\n}\n\nconst getHelpers = (components: Components, component: string, helperType: string = `setting`) => {\n\n  const groupTypes = {\n    group: {\n      path: `groups`,\n    },\n    tab: {\n      path: `tabs`,\n    },\n  }\n\n  const trackedGroups = []\n\n  const walkConfigs = (configs: Configs, callback = null) => {\n\n    const walked = {}\n\n    each(configs, (config, key) => {\n      config = standardizeConfig(key, config)\n      if (callback) {\n        const {\n          config: newConfig,\n          key: newKey,\n        } = callback(key, config)\n        walked[newKey] = newConfig\n      } else {\n        walked[key] = config\n      }\n    })\n\n    return walked\n  }\n\n  const setComponentGroup = (name: string, label: string, configs: Configs, type = `group`) => {\n\n    let path: string = groupTypes[type].path\n    let replacement: ComponentOptions = {}\n\n    each(configs, config => {\n      if (typeof config === `object` && config.group) {\n\n        // TODO: This variable should handle cases where group value is deeply nested\n        const groupExpanded = config.group\n\n        each(groupTypes, groupType => {\n          const group = get(components, [component, groupType.path, groupExpanded])\n          if (group) {\n            set(replacement, [groupType.path, groupExpanded], group)\n            unset(components, [component, groupType.path, groupExpanded])\n\n            const holder = get(components, [component, groupType.path], {})\n            if (size(holder) === 0) {\n              unset(components, [component, groupType.path])\n            }\n          }\n        })\n      }\n    })\n\n    // TODO: Need to think about this more\n    // if (has(components, [component, path, name])) {\n    //   throw new Error(`Duplicate ${type}: \"${name}\"`)\n    // }\n\n    set(components, [component, path, name], assign({\n      label: label,\n    }, replacement))\n  }\n\n  const addNested = (name: string, configs: Configs) => {\n    return walkConfigs(configs, (key: string, config: Config) => {\n\n      if (typeof config === `object`) {\n        if (config.visibleIf) {\n          config.visibleIf = `${name}.${config.visibleIf}`\n        }\n\n        config.longLabel = `${startCase(name)} ⇢ ${config.longLabel ? config.longLabel : (config.label ? config.label : startCase(key))}`\n      }\n\n      return {\n        key: `${name}.${key}`,\n        config,\n      }\n    })\n  }\n\n  const addGroup = (\n    name: string,\n    label: string,\n    configs: Configs,\n    nesting = true,\n    type = `group`,\n    /* eslint-disable-next-line no-unused-vars */\n    callback?: (_: string, _2: Config) => void,\n  ) => {\n\n    // TODO: Eventually store a running list of problems so you can see a count of the issues\n    if (includes(trackedGroups, name)) {\n\n      // TODO: Investigate if this warning is still needed at all. What other parts of the config structure can be validated? \n      // console.warn(`\"${name}\" group already exists in \"${helperType}\"`)\n    } else {\n      trackedGroups.push(name)\n    }\n\n    setComponentGroup(name, label, configs, type)\n\n    return walkConfigs(configs, (key: string, config: ConfigObject) => {\n      config.group = config.group ? `${name}.${config.group}` : name\n\n      if (callback) {\n        callback(key, config)\n      }\n\n      return {\n        key: nesting ? `${name}.${key}` : key,\n        config,\n      }\n    })\n  }\n\n  const addFeature = (name: string, label: string, configs: Configs, enabled: boolean | Config = false, nesting = true) => {\n\n    if (has(configs, `enabled`)) {\n      throw new Error(`Feature \"${name}\" should not contain a property named \"enabled\".`)\n    }\n\n    configs = assign({\n      enabled: standardizeConfig(`enabled`, enabled),\n    }, configs)\n\n    configs = addGroup(name, label, configs, nesting, `group`, (key, config) => {\n      if (key !== `enabled`) {\n        typeof config === `object` && set(config, `visibleIf`, `${name}.enabled`)\n      }\n    })\n\n    return configs as StandardizedConfigs\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  type AddFieldCallbackInnerFuncType = (key: string, config: Config) => void\n  // eslint-disable-next-line no-unused-vars\n  type RemoveFieldCallbackInnerFuncType = (key: string) => void\n  // eslint-disable-next-line no-unused-vars\n  type ModifyLabelCallbackInnerFuncType = (key: string) => void\n\n  const addField = (\n    key: string,\n    // eslint-disable-next-line no-unused-vars\n    callback?: (arg: {\n      insert: AddFieldCallbackInnerFuncType,\n      modify: AddFieldCallbackInnerFuncType,\n      remove: RemoveFieldCallbackInnerFuncType,\n      modifyLabel: ModifyLabelCallbackInnerFuncType,\n    }) => void,\n  ) => {\n\n    let fields: Configs = {}\n\n    const visibleIf = `${key}.isVisible`\n\n    const prettyKey = startCase(key)\n\n    let label = prettyKey\n\n    fields.isVisible = {\n      default: true,\n      label: `Visible`,\n      longLabel: `${prettyKey} ⇢ Visible`,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.required = {\n      default: false,\n      label: `Required`,\n      longLabel: `${prettyKey} ⇢ Required`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.disabled = {\n      default: false,\n      label: `Disabled`,\n      longLabel: `${prettyKey} ⇢ Disabled`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.hasAutoFocus = {\n      default: false,\n      label: `Autofocus`,\n      longLabel: `${prettyKey} ⇢ Autofocus`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.pattern = {\n      default: ``,\n      label: `Pattern`,\n      longLabel: `${prettyKey} ⇢ Pattern`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-12`,\n    }\n\n    if (callback) {\n\n      const insert: AddFieldCallbackInnerFuncType = (key, config) => {\n\n        if (has(fields, key)) {\n          throw new Error(`Field ${key} already exists!`)\n        }\n\n        const parsedConfig = parseConfig(key, config, {\n          visibleIf: visibleIf,\n          styleClasses: `col-md-12`,\n        })\n\n        parsedConfig.longLabel = `${prettyKey} ⇢ ${parsedConfig.label}`\n\n        fields[key] = parsedConfig\n      }\n\n      const modify: AddFieldCallbackInnerFuncType = (key, config) => {\n        merge(fields[key], standardizeConfig(key, config, true))\n      }\n\n      const remove: RemoveFieldCallbackInnerFuncType = key => {\n        delete fields[key]\n      }\n\n      const modifyLabel: ModifyLabelCallbackInnerFuncType = newLabel => {\n        label = newLabel\n      }\n\n      callback && callback({\n        insert,\n        modify,\n        remove,\n        modifyLabel,\n      })\n    }\n\n    return addGroup(key, label, fields, true)\n  }\n\n  const addTab = (label: string, configs: Configs) => {\n\n    const name = `${helperType}-${kebabCase(label)}`\n\n    return addGroup(name, label, configs, false, `tab`)\n  }\n\n  type Pluralized = {\n    zero: string,\n    one: string,\n    many: string,\n  }\n\n  const addPluralized = (name: string, plurals: Pluralized) => {\n\n    const configs = {}\n\n    if (plurals.zero) {\n      configs[`0`] = {\n        default: plurals.zero,\n        label: `Zero Case`,\n        hint: `When there are 0 items`,\n      }\n    }\n\n    if (plurals.one) {\n      configs[`1`] = {\n        default: plurals.one,\n        label: `One Case`,\n        hint: `When there is 1 item`,\n      }\n    }\n\n    if (plurals.many) {\n      configs[`other`] = {\n        default: plurals.many,\n        label: `Many Case`,\n        hint: `When there are many items`,\n      }\n    }\n\n    if (size(configs)) {\n      return addNested(name, configs)\n    }\n  }\n\n  return {\n    addNested,\n    addFeature,\n    addGroup,\n    addTab,\n    addField,\n    addPluralized,\n  }\n}\n\nconst parseConfigsAndComponents = (definitions: Definitions) => {\n\n  const configs: Configs = {}\n  const components = parseComponents(definitions)\n\n  each(definitions, (component, key) => {\n\n    const helpParseConfigsWithCategory = (getCategoryFunction, category = `setting`) => {\n\n      let options: Partial<ConfigObject> = {\n        component: key,\n      }\n\n      const helpers = getHelpers(components, key, category)\n\n      if (category) {\n        options = assign(options, {\n          category: category,\n        })\n      }\n\n      const theseConfigs = getCategoryFunction(helpers)\n      if (size(theseConfigs)) {\n\n        const categories = get(components, [key, `categories`], [])\n        categories.push(category)\n        set(components, [key, `categories`], categories)\n\n        parseConfigsIntoCollection(configs, theseConfigs, options)\n      }\n    }\n\n    const {\n      getConfigs,\n      getFeatures,\n      getSettings,\n      getTranslations,\n      getUI,\n    } = component\n\n    if (getConfigs) {\n      helpParseConfigsWithCategory(getConfigs)\n    } else {\n\n      if (getSettings) {\n        helpParseConfigsWithCategory(getSettings, `setting`)\n      }\n\n      if (getTranslations) {\n        helpParseConfigsWithCategory(getTranslations, `translation`)\n      }\n\n      if (getUI) {\n        helpParseConfigsWithCategory(getUI, `ui`)\n      }\n\n      if (getFeatures) {\n        helpParseConfigsWithCategory(getFeatures, `feature`)\n      }\n    }\n  })\n\n  return {\n    configs,\n    components,\n  }\n}\n\nconst parseComponent = (key: string, component?: ComponentOptions) => {\n  return assign({\n    label: startCase(last(split(key, `.`))),\n    order: 0,\n    toggleable: false,\n    description: null,\n    rootKey: null,\n  }, component) as ComponentOptions\n}\n\nconst parseComponents = (components: Components) => {\n  return mapValues(components, (component, key: string) => {\n    const { getOptions } = component\n\n    return parseComponent(key, getOptions ? getOptions() : null)\n  }) as Components\n}\n\nconst parseComponentsFromConfigs = (configs: Configs, structure: Components = {}) => {\n\n  // TODO: Place all these types in the \"types\" directory\n  const components: Components = {}\n\n  let hasUnsorted = false\n\n  each(configs, config => {\n    if (typeof config === `object` && has(config, `component`)) {\n      if (!has(components, config.component)) {\n\n        let options = {}\n        if (has(structure, config.component)) {\n          const { getOptions } = structure[config.component]\n          options = getOptions ? getOptions() : structure[config.component]\n        }\n\n        components[config.component] = parseComponent(config.component, options)\n      }\n    } else {\n      hasUnsorted = true\n    }\n  })\n\n  if (hasUnsorted && size(components)) {\n    components.unsorted = parseComponent(`unsorted`, {\n      order: 999,\n    })\n  }\n\n  return components\n}\n\nconst standardizeConfigs = (configs: Configs, sourceConfigs): StandardizedConfigs => {\n\n  const standardizedConfigs = {}\n\n  each(configs, config => {\n\n    if (isObject(config) && !has(config, `key`)) {\n      throw new Error(`Onboarder config missing key!`)\n    }\n\n    const key: any = isObject(config) ? config.key : config\n\n    if (!has(sourceConfigs, key)) {\n      throw new Error(`Onboarder defines key \"${key}\" which does not exist.`)\n    }\n\n    if (isObject(config)) {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key], config)\n    } else {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key])\n    }\n  })\n\n  return standardizedConfigs\n}\n\nconst parseOnboarderTabs = (tabs, configs): OnboarderTabs => {\n\n  const parsedOnboardersTabs = {}\n\n  each(tabs, (tab, name) => {\n\n    parsedOnboardersTabs[name] = {\n      label: tab.label ? tab.label : startCase(name),\n      configs: standardizeConfigs(tab.configs, configs),\n    }\n  })\n\n  return parsedOnboardersTabs\n}\n\nconst parseOnboarders = (onboarders, configs): Onboarders => {\n\n  const parsedOnboarders = {}\n\n  each(onboarders, ({ getLabel, getTabs }, name) => {\n\n    parsedOnboarders[name] = {\n      label: getLabel ? getLabel() : startCase(name),\n      tabs: getTabs ? parseOnboarderTabs(getTabs(), configs) : {},\n    }\n  })\n\n  return parsedOnboarders\n}\n\nconst verifyConfigs = configs => {\n\n  each(configs, (config, key) => {\n\n    // Make sure \"inherit\" value exists as a key if defined\n    if (config.inherit) {\n\n      if (!has(configs, config.inherit)) {\n        throw new Error(`Config with key \"${key}\" has inherit property defined as \"${config.inherit}\" which is not a valid key!`)\n      }\n    }\n  })\n}\n\nconst parseSource = async ({ getComponents, getConfigs, getLabel, getMappings, getName, getOnboarders, getOverrides, source }: SourceConfigs) => {\n\n  const name = getName ? await getName() : source\n  const label = getLabel ? await getLabel() : startCase(name)\n\n  const options: Source = {\n    name,\n    label,\n  }\n\n  const grabComponents = getComponents ? await getComponents() : null\n\n  if (getConfigs) {\n    const configs = parseConfigs(await getConfigs())\n    const components = parseComponentsFromConfigs(configs, grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  } else {\n    let { components, configs } = parseConfigsAndComponents(grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  }\n\n  verifyConfigs(options.configs)\n\n  if (getOnboarders) {\n    options.onboarders = parseOnboarders(await getOnboarders(), options.configs)\n  }\n\n  if (getOverrides) {\n    options.overrides = await getOverrides()\n  }\n\n  if (getMappings) {\n    options.mappings = await getMappings()\n  }\n\n  return options\n}\n\nclass SourceError extends Error {\n\n  constructor(source, error) {\n    super(`${error.message} (\"${source}\" source)`)\n    this.name = `SourceError`\n  }\n}\n\nexport { parseSource, SourceError }\n","import { parseSource, SourceConfigs } from './parseSource'\n\nconst parseSourceConfigs = async (source: string, stack: SourceConfigs) => {\n\n  const parsedSource = await parseSource({\n    source,\n    ...stack,\n  })\n\n  return parsedSource.configs\n}\n\nexport { parseSourceConfigs }\n","import lodash from 'lodash'\n\nconst { each, get, includes, isObject, isUndefined } = lodash\n\nconst validateSources = (sources) => {\n\n  const checkThatSourceHasConfig = (source, key: string, option: string = null) => {\n\n    const config = get(sources, [source, `configs`, key])\n\n    if (option) {\n      if (!includes(config.values, option)) {\n        console.warn(`Mapping Check: ${key} with option \"${option}\" does not exist on ${source}`)\n      }\n    }\n\n    if (isUndefined(config)) {\n      console.warn(`Mapping Check: ${key} does not exist on ${source}`)\n    }\n  }\n\n  each(sources, (source, key) => {\n\n    // Check 1: Verify that mapped keys exist\n    if (source.mappings) {\n      each(source.mappings, (mapping, mapTo) => {\n        each(mapping, (to, from) => {\n          if (isObject(to)) {\n            each(to, (valueTo, valueFrom) => {\n              // Object maps should already be set in \".values\" by the time we run this check here (eg. app/sources/wlw-v3/src/configs/components/order.ts)\n              checkThatSourceHasConfig(key, from, valueFrom)\n              checkThatSourceHasConfig(mapTo, valueTo)\n            })\n          } else {\n            checkThatSourceHasConfig(key, from)\n            checkThatSourceHasConfig(mapTo, to)\n          }\n        })\n      })\n    }\n\n  })\n}\n\nexport { validateSources }\n"],"names":["ConfigCategory","ConfigCategoryPlurals","CATEGORIES","Setting","plural","label","labelPlural","order","Translation","UI","Feature","assign","mapValues","lodash","getTransformationOptions","options","nested","categorized","sort","fromPairs","sortBy","toPairs","object","each","setWith","transformToNested","transformed","value","key","Object","get","transformResponse","response","opts","configs","sortObjectAlphabetically","callback","newKey","newValue","helpTransformResponse","config","category","console","warn","has","transformFromConfigsToResponse","defaultsOnly","inherit","default","transformToConfigValues","differenceWith","isEqual","pickBy","getDiffByStatus","object1","object2","changes","added","changed","reverseChanges","removed","getDiff","diffByStatus","diff","statusKey","status","previous","logMemoryUsage","used","process","memoryUsage","message","Math","round","log","endsWith","includes","isObject","kebabCase","last","mapKeys","merge","set","size","split","startCase","unset","getType","standardizeConfig","skipDefaultCheck","Error","parseConfig","logWarningsForConfigIfAny","docLink","docLinkText","hint","inheritText","defaults","type","inputType","parseConfigs","parseComponent","component","toggleable","description","rootKey","standardizeConfigs","sourceConfigs","standardizedConfigs","parseOnboarderTabs","tabs","tab","name","parsedOnboardersTabs","parseSource","async","getComponents","getConfigs","getLabel","getMappings","getName","getOnboarders","getOverrides","source","grabComponents","components","structure","getOptions","hasUnsorted","unsorted","parseComponentsFromConfigs","definitions","parseComponents","getCategoryFunction","helperType","groupTypes","group","path","trackedGroups","walkConfigs","walked","newConfig","addNested","visibleIf","longLabel","addGroup","nesting","push","groupExpanded","groupType","replacement","holder","setComponentGroup","addFeature","enabled","addTab","addField","fields","prettyKey","isVisible","styleClasses","required","disabled","hasAutoFocus","pattern","insert","parsedConfig","modify","modifyLabel","newLabel","remove","addPluralized","plurals","zero","one","many","getHelpers","theseConfigs","helpers","categories","parseUniqueConfigs","parseConfigsIntoCollection","getFeatures","getSettings","getTranslations","getUI","helpParseConfigsWithCategory","parseConfigsAndComponents","onboarders","parsedOnboarders","getTabs","parseOnboarders","overrides","mappings","SourceError","constructor","error","super","this","parseSourceConfigs","stack","_extends","isUndefined","validateSources","sources","checkThatSourceHasConfig","option","values","mapping","mapTo","to","from","valueTo","valueFrom"],"mappings":"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"}