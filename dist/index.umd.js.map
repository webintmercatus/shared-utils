{"version":3,"file":"index.umd.js","sources":["../src/constants/CATEGORIES.ts","../src/fetchConfigs/transformationOptions.ts","../src/sortObjectAlphabetically.ts","../src/fetchConfigs/transformToNested.ts","../src/fetchConfigs/transformResponse.ts","../src/fetchConfigs/transformToConfigValues.ts","../src/getDiff.ts","../src/parseSource/parseSource.ts","../src/logMemoryUsage.ts","../src/parseSource/parseSourceConfigs.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum ConfigCategory {\n  Setting = `setting`,\n  Translation = `translation`,\n  UI = `ui`,\n  Feature = `feature`\n}\n\nexport enum ConfigCategoryPlurals {\n  Setting = `settings`,\n  Translation = `translations`,\n  UI = `ui`,\n  Feature = `features`\n}\n\n/* eslint-enable: no-unused-vars */\nconst CATEGORIES = {\n  [ConfigCategory.Setting]: {\n    plural: ConfigCategoryPlurals.Setting,\n    label: `Setting`,\n    labelPlural: `Settings`,\n    order: 1,\n  },\n  [ConfigCategory.Translation]: {\n    plural: ConfigCategoryPlurals.Translation,\n    label: `Translation`,\n    labelPlural: `Translations`,\n    order: 2,\n  },\n  [ConfigCategory.UI]: {\n    plural: ConfigCategoryPlurals.UI,\n    label: `UI`,\n    labelPlural: `UI`,\n    order: 3,\n  },\n  [ConfigCategory.Feature]: {\n    plural: ConfigCategoryPlurals.Feature,\n    label: `Feature`,\n    labelPlural: `Features`,\n    order: 4,\n  },\n}\n\nexport { CATEGORIES }\n","import lodash from 'lodash'\n\nconst { assign, mapValues } = lodash\n\nexport type TransformationOptions = {\n  nested: boolean,\n  categorized: boolean,\n  sort: boolean,\n}\n\nconst getTransformationOptions = (options: Partial<TransformationOptions> = {}): TransformationOptions => {\n\n  options = mapValues(options, () => true)\n\n  const opts: TransformationOptions = {\n    nested: false,\n    categorized: false,\n    sort: false, // TODO: In EDGE, we may want to be more flexible and allow a string value for `sort` to support different sorting methods\n  }\n\n  return assign(opts, options)\n}\n\nexport { getTransformationOptions }\n","import lodash from 'lodash'\n\nconst { fromPairs, sortBy, toPairs } = lodash\n\nconst sortObjectAlphabetically = object => {\n  return fromPairs(sortBy(toPairs(object), 0)) as object\n}\n\nexport { sortObjectAlphabetically }\n","import lodash from 'lodash'\n\nconst { each, setWith } = lodash\n\nconst transformToNested = object => {\n\n  const transformed = {}\n\n  each(object, (value, key) => {\n    setWith(transformed, key, value, Object)\n  })\n\n  return transformed\n}\n\nexport { transformToNested }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { sortObjectAlphabetically } from '../sortObjectAlphabetically'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get } = lodash\n\nconst helpTransformResponse = (response, callback = null) => {\n\n  const transformed = {}\n\n  each(response, (value, key) => {\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, value)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    transformed[key] = value\n  })\n\n  return transformed\n}\n\nconst transformResponse = (response, opts = {}, configs = null) => {\n\n  const options = getTransformationOptions(opts)\n\n  let transformed = response\n\n  if (options.sort) {\n    transformed = sortObjectAlphabetically(transformed)\n  }\n\n  if (options.categorized) {\n\n    transformed = helpTransformResponse(transformed, key => {\n\n      const config = get(configs, key)\n\n      if (config) {\n        key = `${CATEGORIES[config.category].plural}.${key}`\n      } else {\n        console.warn(`Non-existent key ${key} is not part of the config set.`)\n        key = `nonexistent.${key}`\n      }\n\n      return {\n        key,\n      }\n    })\n  }\n\n  if (options.nested) {\n    return transformToNested(transformed)\n  }\n\n  return transformed\n}\n\nexport { transformResponse }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get, has } = lodash\n\nconst transformFromConfigsToResponse = (configs, callback = null, defaultsOnly = false) => {\n\n  const response = {}\n\n  each(configs, (config, key) => {\n    // Set inherited values\n    if (config.inherit) {\n      config.default = get(configs, config.inherit).default\n    }\n    // TODO: Figure out why configs have value properties when a configuration is saved but not published\n    let value = has(config, `value`) && !defaultsOnly ? config.value : config.default\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, config)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    response[key] = value\n  })\n\n  return response\n}\n\nconst transformToConfigValues = (configs, opts = {}, defaultsOnly = false) => {\n\n  const options = getTransformationOptions(opts)\n\n  const response = transformFromConfigsToResponse(configs, (key, config) => {\n\n    key = options.categorized ? `${CATEGORIES[config.category].plural}.${key}` : key\n\n    return {\n      key,\n    }\n  }, defaultsOnly)\n\n  if (options.nested) {\n    return transformToNested(response)\n  }\n\n  return response\n}\n\nexport { transformFromConfigsToResponse, transformToConfigValues }\n","import lodash from 'lodash'\n\nconst { differenceWith, each, fromPairs, has, isEqual, pickBy, toPairs } = lodash\n\nconst getDiffByStatus = (object1, object2): object => {\n  const changes = fromPairs(differenceWith(toPairs(object2), toPairs(object1), isEqual)) as object\n\n  const added = pickBy(changes, (value, key) => {\n    return !has(object1, key)\n  })\n\n  const changed = pickBy(changes, (value, key) => {\n    return has(object1, key)\n  })\n\n  const reverseChanges = fromPairs(differenceWith(toPairs(object1), toPairs(object2), isEqual)) as object\n\n  const removed = pickBy(reverseChanges, (value, key) => {\n    return !has(object2, key)\n  })\n\n  return { added: added, changed: changed, removed: removed }\n}\n\nconst getDiff = (object1, object2) => {\n  const diffByStatus = getDiffByStatus(object1, object2)\n\n  const diff = {}\n\n  each(diffByStatus, (value, statusKey) => {\n    each(diffByStatus[statusKey], (value, key) => {\n      diff[key] = {\n        value: value,\n        status: statusKey,\n        previous: has(object1, key) ? object1[key] : null,\n      }\n    })\n  })\n\n  return diff\n}\n\nexport { getDiff, getDiffByStatus }\n","import lodash from 'lodash'\n\nimport type { Component, ComponentOptions, Components, Config, ConfigObject, Configs, Onboarder, Onboarders, OnboarderTabs, Source, StandardizedConfigs } from '../types'\n\nconst { assign, each, endsWith, get, has, includes, isObject, kebabCase, last, mapKeys, mapValues, merge, set, size, split, startCase, unset } = lodash\n\nexport type SourceConfigs = {\n  getComponents?: () => Promise<Components>,\n  getOverrides?: () => Promise<object>\n  getOnboarders?: () => Promise<Onboarder>,\n  getConfigs?: () => Promise<Configs>,\n  getLabel?: () => string | Promise<string | undefined>,\n  getName?: () => string | Promise<string | undefined>,\n  source?: string\n}\n\n// TODO: HelperFunctions is deprecated\nexport type HelperFunctions = ReturnType<typeof getHelpers>\nexport type Context = ReturnType<typeof getHelpers>\n\nexport type Definitions = {\n  [key: string]: DefinitionComponent\n}\n\n/* eslint-disable no-unused-vars */\nexport type DefinitionComponent = {\n  getConfigs?: (_: HelperFunctions) => Configs\n  getSettings?: (_: HelperFunctions) => Configs\n  getTranslations?: (_: HelperFunctions) => Configs\n  getUI?: (_: HelperFunctions) => Configs,\n  getFeatures?: (_: HelperFunctions) => Configs,\n  getOptions?: () => Component\n}\n\n/* eslint-enable no-unused-vars */\n\nconst getType = (config: Config) => {\n  if (typeof config === `object`) {\n    switch (typeof config.default) {\n      case `boolean`:\n        return `switch`\n    }\n  }\n\n  return `input`\n}\n\nconst standardizeConfig = (key: string, config: Config, skipDefaultCheck = false) => {\n\n  if (isObject(config)) {\n    if (!skipDefaultCheck && (!has(config, `default`) && !has(config, `inherit`))) {\n      throw new Error(`Config \"${key}\" is missing a \"default\" value (or \"inherit\" reference).`)\n    }\n  } else {\n    config = {\n      default: config,\n    }\n  }\n\n  return config as ConfigObject\n}\n\nconst parseConfig = (key: string, config: Config, options: Partial<ConfigObject> = {}) => {\n\n  config = standardizeConfig(key, config)\n\n  logWarningsForConfigIfAny(key, config)\n\n  delete config.key\n\n  if (config.docLink) {\n    const docLinkText = `Documentation on this feature can be found <a href=\"${config.docLink}\">here</a>.`\n    config.hint = config.hint ? docLinkText + `<br>${config.hint}` : docLinkText\n    delete config.docLink\n  }\n\n  if (config.inherit) {\n    // TODO: It would be nice to eventually show the value of the config that is being inherited from\n    // as part of the message. (This would involve a DB lookup, so we'll save this for a later time.)\n    const inheritText = `When unchanged, inherits value from <code>${config.inherit}</code>.`\n    config.hint = config.hint ? inheritText + `<br>${config.hint}` : inheritText\n  }\n\n  return assign({\n    default: null, // This is placed here so that `default` appears as first property\n    type: getType(config),\n    label: startCase(last(split(key, `.`))),\n    category: `setting`,\n  } as ConfigObject, config, options) as ConfigObject\n}\n\nconst logWarningsForConfigIfAny = (key: string, config: ConfigObject) => {\n\n  // This check will help to point out potential configs that should have their inputType set to \"number\"\n  if (!config.inputType && (endsWith(key, `_id`) || endsWith(key, `ID`))) {\n\n    // We can rule out a few cases with a couple of extra checks  \n    if (config.default === `` || config.default === null || !includes([`boolean`, `string`], typeof config.default)) {\n      console.warn(`To remove this warning, set the \"inputType\" on \"${key}\" to \"number\" if its value is meant to be parsed as a number (\"string\" otherwise)`)\n    }\n  }\n}\n\nconst parseConfigs = (\n  configs: Configs,\n  options: Partial<ConfigObject> = {},\n  // eslint-disable-next-line no-unused-vars\n  callback?: (key: string, config: Config) => void,\n) => {\n\n  configs = mapKeys(configs, (config: Config, key: string) => {\n    return get(config, `key`, key)\n  })\n\n  return mapValues(configs, (config: Config, key: string) => {\n\n    callback && callback(key, config)\n\n    return parseConfig(key, config, options)\n  }) as StandardizedConfigs\n}\n\nconst parseUniqueConfigs = (set: Configs, configs: Configs, options: Partial<ConfigObject>) => {\n  return parseConfigs(configs, options, (key) => {\n    if (has(set, key)) {\n      throw new Error(`Duplicate key: \"${key}\"`)\n    }\n  })\n}\n\nconst parseConfigsIntoCollection = (set: Configs, configs: Configs, options: Partial<ComponentOptions>) => {\n  merge(set, parseUniqueConfigs(set, configs, options))\n}\n\nconst getHelpers = (components: Components, component: string, helperType: string = `setting`) => {\n\n  const groupTypes = {\n    group: {\n      path: `groups`,\n    },\n    tab: {\n      path: `tabs`,\n    },\n  }\n\n  const trackedGroups = []\n\n  const walkConfigs = (configs: Configs, callback = null) => {\n\n    const walked = {}\n\n    each(configs, (config, key) => {\n      config = standardizeConfig(key, config)\n      if (callback) {\n        const {\n          config: newConfig,\n          key: newKey,\n        } = callback(key, config)\n        walked[newKey] = newConfig\n      } else {\n        walked[key] = config\n      }\n    })\n\n    return walked\n  }\n\n  const setComponentGroup = (name: string, label: string, configs: Configs, type = `group`) => {\n\n    let path: string = groupTypes[type].path\n    let replacement: ComponentOptions = {}\n\n    each(configs, config => {\n      if (typeof config === `object` && config.group) {\n\n        // TODO: This variable should handle cases where group value is deeply nested\n        const groupExpanded = config.group\n\n        each(groupTypes, groupType => {\n          const group = get(components, [component, groupType.path, groupExpanded])\n          if (group) {\n            set(replacement, [groupType.path, groupExpanded], group)\n            unset(components, [component, groupType.path, groupExpanded])\n\n            const holder = get(components, [component, groupType.path], {})\n            if (size(holder) === 0) {\n              unset(components, [component, groupType.path])\n            }\n          }\n        })\n      }\n    })\n\n    // TODO: Need to think about this more\n    // if (has(components, [component, path, name])) {\n    //   throw new Error(`Duplicate ${type}: \"${name}\"`)\n    // }\n\n    set(components, [component, path, name], assign({\n      label: label,\n    }, replacement))\n  }\n\n  const addNested = (name: string, configs: Configs) => {\n    return walkConfigs(configs, (key: string, config: Config) => {\n\n      if (typeof config === `object`) {\n        if (config.visibleIf) {\n          config.visibleIf = `${name}.${config.visibleIf}`\n        }\n\n        config.longLabel = `${startCase(name)} ⇢ ${config.longLabel ? config.longLabel : (config.label ? config.label : startCase(key))}`\n      }\n\n      return {\n        key: `${name}.${key}`,\n        config,\n      }\n    })\n  }\n\n  const addGroup = (\n    name: string,\n    label: string,\n    configs: Configs,\n    nesting = true,\n    type = `group`,\n    /* eslint-disable-next-line no-unused-vars */\n    callback?: (_: string, _2: Config) => void,\n  ) => {\n\n    // TODO: Eventually store a running list of problems so you can see a count of the issues\n    if (includes(trackedGroups, name)) {\n\n      // TODO: Investigate if this warning is still needed at all. What other parts of the config structure can be validated? \n      // console.warn(`\"${name}\" group already exists in \"${helperType}\"`)\n    } else {\n      trackedGroups.push(name)\n    }\n\n    setComponentGroup(name, label, configs, type)\n\n    return walkConfigs(configs, (key: string, config: ConfigObject) => {\n      config.group = config.group ? `${name}.${config.group}` : name\n\n      if (callback) {\n        callback(key, config)\n      }\n\n      return {\n        key: nesting ? `${name}.${key}` : key,\n        config,\n      }\n    })\n  }\n\n  const addFeature = (name: string, label: string, configs: Configs, enabled: boolean | Config = false, nesting = true) => {\n\n    if (has(configs, `enabled`)) {\n      throw new Error(`Feature \"${name}\" should not contain a property named \"enabled\".`)\n    }\n\n    configs = assign({\n      enabled: standardizeConfig(`enabled`, enabled),\n    }, configs)\n\n    configs = addGroup(name, label, configs, nesting, `group`, (key, config) => {\n      if (key !== `enabled`) {\n        typeof config === `object` && set(config, `visibleIf`, `${name}.enabled`)\n      }\n    })\n\n    return configs as StandardizedConfigs\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  type AddFieldCallbackInnerFuncType = (key: string, config: Config) => void\n  // eslint-disable-next-line no-unused-vars\n  type RemoveFieldCallbackInnerFuncType = (key: string) => void\n  // eslint-disable-next-line no-unused-vars\n  type ModifyLabelCallbackInnerFuncType = (key: string) => void\n\n  const addField = (\n    key: string,\n    // eslint-disable-next-line no-unused-vars\n    callback?: (arg: {\n      insert: AddFieldCallbackInnerFuncType,\n      modify: AddFieldCallbackInnerFuncType,\n      remove: RemoveFieldCallbackInnerFuncType,\n      modifyLabel: ModifyLabelCallbackInnerFuncType,\n    }) => void,\n  ) => {\n\n    let fields: Configs = {}\n\n    const visibleIf = `${key}.isVisible`\n\n    const prettyKey = startCase(key)\n\n    let label = prettyKey\n\n    fields.isVisible = {\n      default: true,\n      label: `Visible`,\n      longLabel: `${prettyKey} ⇢ Visible`,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.required = {\n      default: false,\n      label: `Required`,\n      longLabel: `${prettyKey} ⇢ Required`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.disabled = {\n      default: false,\n      label: `Disabled`,\n      longLabel: `${prettyKey} ⇢ Disabled`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.hasAutoFocus = {\n      default: false,\n      label: `Autofocus`,\n      longLabel: `${prettyKey} ⇢ Autofocus`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.pattern = {\n      default: ``,\n      label: `Pattern`,\n      longLabel: `${prettyKey} ⇢ Pattern`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-12`,\n    }\n\n    if (callback) {\n\n      const insert: AddFieldCallbackInnerFuncType = (key, config) => {\n\n        if (has(fields, key)) {\n          throw new Error(`Field ${key} already exists!`)\n        }\n\n        const parsedConfig = parseConfig(key, config, {\n          visibleIf: visibleIf,\n          styleClasses: `col-md-12`,\n        })\n\n        parsedConfig.longLabel = `${prettyKey} ⇢ ${parsedConfig.label}`\n\n        fields[key] = parsedConfig\n      }\n\n      const modify: AddFieldCallbackInnerFuncType = (key, config) => {\n        merge(fields[key], standardizeConfig(key, config, true))\n      }\n\n      const remove: RemoveFieldCallbackInnerFuncType = key => {\n        delete fields[key]\n      }\n\n      const modifyLabel: ModifyLabelCallbackInnerFuncType = newLabel => {\n        label = newLabel\n      }\n\n      callback && callback({\n        insert,\n        modify,\n        remove,\n        modifyLabel,\n      })\n    }\n\n    return addGroup(key, label, fields, true)\n  }\n\n  const addTab = (label: string, configs: Configs) => {\n\n    const name = `${helperType}-${kebabCase(label)}`\n\n    return addGroup(name, label, configs, false, `tab`)\n  }\n\n  type Pluralized = {\n    zero: string,\n    one: string,\n    many: string,\n  }\n\n  const addPluralized = (name: string, plurals: Pluralized) => {\n\n    const configs = {}\n\n    if (plurals.zero) {\n      configs[`0`] = {\n        default: plurals.zero,\n        label: `Zero Case`,\n        hint: `When there are 0 items`,\n      }\n    }\n\n    if (plurals.one) {\n      configs[`1`] = {\n        default: plurals.one,\n        label: `One Case`,\n        hint: `When there is 1 item`,\n      }\n    }\n\n    if (plurals.many) {\n      configs[`other`] = {\n        default: plurals.many,\n        label: `Many Case`,\n        hint: `When there are many items`,\n      }\n    }\n\n    if (size(configs)) {\n      return addNested(name, configs)\n    }\n  }\n\n  return {\n    addNested,\n    addFeature,\n    addGroup,\n    addTab,\n    addField,\n    addPluralized,\n  }\n}\n\nconst parseConfigsAndComponents = (definitions: Definitions) => {\n\n  const configs: Configs = {}\n  const components = parseComponents(definitions)\n\n  each(definitions, (component, key) => {\n\n    const helpParseConfigsWithCategory = (getCategoryFunction, category = `setting`) => {\n\n      let options: Partial<ConfigObject> = {\n        component: key,\n      }\n\n      const helpers = getHelpers(components, key, category)\n\n      if (category) {\n        options = assign(options, {\n          category: category,\n        })\n      }\n\n      const theseConfigs = getCategoryFunction(helpers)\n      if (size(theseConfigs)) {\n\n        const categories = get(components, [key, `categories`], [])\n        categories.push(category)\n        set(components, [key, `categories`], categories)\n\n        parseConfigsIntoCollection(configs, theseConfigs, options)\n      }\n    }\n\n    const {\n      getConfigs,\n      getFeatures,\n      getSettings,\n      getTranslations,\n      getUI,\n    } = component\n\n    if (getConfigs) {\n      helpParseConfigsWithCategory(getConfigs)\n    } else {\n\n      if (getSettings) {\n        helpParseConfigsWithCategory(getSettings, `setting`)\n      }\n\n      if (getTranslations) {\n        helpParseConfigsWithCategory(getTranslations, `translation`)\n      }\n\n      if (getUI) {\n        helpParseConfigsWithCategory(getUI, `ui`)\n      }\n\n      if (getFeatures) {\n        helpParseConfigsWithCategory(getFeatures, `feature`)\n      }\n    }\n  })\n\n  return {\n    configs,\n    components,\n  }\n}\n\nconst parseComponent = (key: string, component?: ComponentOptions) => {\n  return assign({\n    label: startCase(last(split(key, `.`))),\n    order: 0,\n    toggleable: false,\n    description: null,\n    rootKey: null,\n  }, component) as ComponentOptions\n}\n\nconst parseComponents = (components: Components) => {\n  return mapValues(components, (component, key: string) => {\n    const { getOptions } = component\n\n    return parseComponent(key, getOptions ? getOptions() : null)\n  }) as Components\n}\n\nconst parseComponentsFromConfigs = (configs: Configs, structure: Components = {}) => {\n\n  // TODO: Place all these types in the \"types\" directory\n  const components: Components = {}\n\n  let hasUnsorted = false\n\n  each(configs, config => {\n    if (typeof config === `object` && has(config, `component`)) {\n      if (!has(components, config.component)) {\n\n        let options = {}\n        if (has(structure, config.component)) {\n          const { getOptions } = structure[config.component]\n          options = getOptions ? getOptions() : structure[config.component]\n        }\n\n        components[config.component] = parseComponent(config.component, options)\n      }\n    } else {\n      hasUnsorted = true\n    }\n  })\n\n  if (hasUnsorted && size(components)) {\n    components.unsorted = parseComponent(`unsorted`, {\n      order: 999,\n    })\n  }\n\n  return components\n}\n\nconst standardizeConfigs = (configs: Configs, sourceConfigs): StandardizedConfigs => {\n\n  const standardizedConfigs = {}\n\n  each(configs, config => {\n\n    if (isObject(config) && !has(config, `key`)) {\n      throw new Error(`Onboarder config missing key!`)\n    }\n\n    const key: any = isObject(config) ? config.key : config\n\n    if (!has(sourceConfigs, key)) {\n      throw new Error(`Onboarder defines key \"${key}\" which does not exist.`)\n    }\n\n    if (isObject(config)) {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key], config)\n    } else {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key])\n    }\n  })\n\n  return standardizedConfigs\n}\n\nconst parseOnboarderTabs = (tabs, configs): OnboarderTabs => {\n\n  const parsedOnboardersTabs = {}\n\n  each(tabs, (tab, name) => {\n\n    parsedOnboardersTabs[name] = {\n      label: tab.label ? tab.label : startCase(name),\n      configs: standardizeConfigs(tab.configs, configs),\n    }\n  })\n\n  return parsedOnboardersTabs\n}\n\nconst parseOnboarders = (onboarders, configs): Onboarders => {\n\n  const parsedOnboarders = {}\n\n  each(onboarders, ({ getLabel, getTabs }, name) => {\n\n    parsedOnboarders[name] = {\n      label: getLabel ? getLabel() : startCase(name),\n      tabs: getTabs ? parseOnboarderTabs(getTabs(), configs) : {},\n    }\n  })\n\n  return parsedOnboarders\n}\n\nconst verifyConfigs = configs => {\n\n  each(configs, (config, key) => {\n\n    // Make sure \"inherit\" value exists as a key if defined\n    if (config.inherit) {\n\n      if (!has(configs, config.inherit)) {\n        throw new Error(`Config with key \"${key}\" has inherit property defined as \"${config.inherit}\" which is not a valid key!`)\n      }\n    }\n  })\n}\n\nconst parseSource = async ({ getComponents, getConfigs, getLabel, getName, getOnboarders, getOverrides, source }: SourceConfigs) => {\n\n  const name = getName ? await getName() : source\n  const label = getLabel ? await getLabel() : startCase(name)\n\n  const options: Source = {\n    name,\n    label,\n  }\n\n  const grabComponents = getComponents ? await getComponents() : null\n\n  if (getConfigs) {\n    const configs = parseConfigs(await getConfigs())\n    const components = parseComponentsFromConfigs(configs, grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  } else {\n    let { components, configs } = parseConfigsAndComponents(grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  }\n\n  verifyConfigs(options.configs)\n\n  if (getOnboarders) {\n    options.onboarders = parseOnboarders(await getOnboarders(), options.configs)\n  }\n\n  if (getOverrides) {\n    options.overrides = await getOverrides()\n  }\n\n  return options\n}\n\nclass SourceError extends Error {\n\n  constructor(source, error) {\n    super(`${error.message} (\"${source}\" source)`)\n    this.name = `SourceError`\n  }\n}\n\nexport { parseSource, SourceError }\n","const logMemoryUsage = () => {\n\n  const used = process.memoryUsage()\n\n  let message = `Memory Usage\\n`\n\n  for (let key in used) {\n    message += `${key}: ${Math.round(used[key] / 1024 / 1024 * 100) / 100} MB\\n`\n  }\n\n  console.log(message)\n}\n\nexport { logMemoryUsage }\n\n","import { parseSource, SourceConfigs } from './parseSource'\n\nconst parseSourceConfigs = async (source: string, stack: SourceConfigs) => {\n\n  const parsedSource = await parseSource({\n    source,\n    ...stack,\n  })\n\n  return parsedSource.configs\n}\n\nexport { parseSourceConfigs }\n"],"names":["_CATEGORIES","ConfigCategory","ConfigCategoryPlurals","CATEGORIES","Setting","plural","label","labelPlural","order","Translation","UI","Feature","assign","lodash","mapValues","getTransformationOptions","options","nested","categorized","sort","fromPairs","sortBy","toPairs","object","each","setWith","transformToNested","transformed","value","key","Object","get","has","transformFromConfigsToResponse","configs","callback","defaultsOnly","response","config","inherit","newKey","newValue","differenceWith","isEqual","pickBy","getDiffByStatus","object1","object2","changes","added","changed","removed","reverseChanges","endsWith","includes","isObject","kebabCase","last","mapKeys","merge","set","size","split","startCase","unset","getType","standardizeConfig","skipDefaultCheck","Error","default","parseConfig","logWarningsForConfigIfAny","docLink","docLinkText","hint","inheritText","type","category","inputType","console","warn","parseComponent","component","toggleable","description","rootKey","standardizeConfigs","sourceConfigs","standardizedConfigs","tabs","parsedOnboardersTabs","tab","name","parseSource","getComponents","getConfigs","_ref2","getLabel","getName","getOnboarders","getOverrides","source","_temp9","grabComponents","Promise","resolve","then","_getOverrides","overrides","_temp","_temp2","_getOnboarders","onboarders","parsedOnboarders","getTabs","parseOnboarderTabs","parseOnboarders","parseConfigs","_getConfigs","structure","components","hasUnsorted","getOptions","unsorted","parseComponentsFromConfigs","definitions","parseConfigsAndComponents","parseComponents","helpParseConfigsWithCategory","getCategoryFunction","helpers","helperType","groupTypes","group","path","walked","walkConfigs","visibleIf","longLabel","addGroup","nesting","trackedGroups","push","replacement","groupExpanded","groupType","holder","setComponentGroup","addNested","addFeature","enabled","addTab","addField","fields","prettyKey","isVisible","styleClasses","required","disabled","hasAutoFocus","pattern","insert","parsedConfig","modify","remove","modifyLabel","newLabel","addPluralized","plurals","zero","one","many","getHelpers","theseConfigs","categories","parseUniqueConfigs","parseConfigsIntoCollection","getFeatures","getSettings","getTranslations","getUI","_temp6","e","reject","SourceError","error","_this","_Error","call","this","message","diffByStatus","diff","statusKey","status","previous","used","process","memoryUsage","Math","round","log","stack","parsedSource","opts","sortObjectAlphabetically","_callback","helpTransformResponse"],"mappings":"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"}