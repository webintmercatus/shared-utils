{"version":3,"file":"index.module.mjs","sources":["../src/constants/CATEGORIES.ts","../src/fetchConfigs/transformationOptions.ts","../src/sortObjectAlphabetically.ts","../src/fetchConfigs/transformToNested.ts","../src/fetchConfigs/transformResponse.ts","../src/fetchConfigs/transformToConfigValues.ts","../src/getDiff.ts","../src/logMemoryUsage.ts","../src/parseSource/parseSource.ts","../src/parseSource/parseSourceConfigs.ts","../src/parseSource/validateSources.ts"],"sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum ConfigCategory {\n  Setting = `setting`,\n  Translation = `translation`,\n  UI = `ui`,\n  Feature = `feature`\n}\n\nexport enum ConfigCategoryPlurals {\n  Setting = `settings`,\n  Translation = `translations`,\n  UI = `ui`,\n  Feature = `features`\n}\n\n/* eslint-enable: no-unused-vars */\nconst CATEGORIES = {\n  [ConfigCategory.Setting]: {\n    plural: ConfigCategoryPlurals.Setting,\n    label: `Setting`,\n    labelPlural: `Settings`,\n    order: 1,\n  },\n  [ConfigCategory.Translation]: {\n    plural: ConfigCategoryPlurals.Translation,\n    label: `Translation`,\n    labelPlural: `Translations`,\n    order: 2,\n  },\n  [ConfigCategory.UI]: {\n    plural: ConfigCategoryPlurals.UI,\n    label: `UI`,\n    labelPlural: `UI`,\n    order: 3,\n  },\n  [ConfigCategory.Feature]: {\n    plural: ConfigCategoryPlurals.Feature,\n    label: `Feature`,\n    labelPlural: `Features`,\n    order: 4,\n  },\n}\n\nexport { CATEGORIES }\n","import lodash from 'lodash'\n\nconst { assign, mapValues } = lodash\n\nexport type TransformationOptions = {\n  nested: boolean,\n  categorized: boolean,\n  sort: boolean,\n}\n\nconst getTransformationOptions = (options: Partial<TransformationOptions> = {}): TransformationOptions => {\n\n  options = mapValues(options, () => true)\n\n  const opts: TransformationOptions = {\n    nested: false,\n    categorized: false,\n    sort: false, // TODO: In EDGE, we may want to be more flexible and allow a string value for `sort` to support different sorting methods\n  }\n\n  return assign(opts, options)\n}\n\nexport { getTransformationOptions }\n","import lodash from 'lodash'\n\nconst { fromPairs, sortBy, toPairs } = lodash\n\nconst sortObjectAlphabetically = object => {\n  return fromPairs(sortBy(toPairs(object), 0)) as object\n}\n\nexport { sortObjectAlphabetically }\n","import lodash from 'lodash'\n\nconst { each, setWith } = lodash\n\nconst transformToNested = object => {\n\n  const transformed = {}\n\n  each(object, (value, key) => {\n    setWith(transformed, key, value, Object)\n  })\n\n  return transformed\n}\n\nexport { transformToNested }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { sortObjectAlphabetically } from '../sortObjectAlphabetically'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get } = lodash\n\nconst helpTransformResponse = (response, callback = null) => {\n\n  const transformed = {}\n\n  each(response, (value, key) => {\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, value)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    transformed[key] = value\n  })\n\n  return transformed\n}\n\nconst transformResponse = (response, opts = {}, configs = null) => {\n\n  const options = getTransformationOptions(opts)\n\n  let transformed = response\n\n  if (options.sort) {\n    transformed = sortObjectAlphabetically(transformed)\n  }\n\n  if (options.categorized) {\n\n    transformed = helpTransformResponse(transformed, key => {\n\n      const config = get(configs, key)\n\n      if (config) {\n        key = `${CATEGORIES[config.category].plural}.${key}`\n      } else {\n        console.warn(`Non-existent key ${key} is not part of the config set.`)\n        key = `nonexistent.${key}`\n      }\n\n      return {\n        key,\n      }\n    })\n  }\n\n  if (options.nested) {\n    return transformToNested(transformed)\n  }\n\n  return transformed\n}\n\nexport { transformResponse }\n","import lodash from 'lodash'\n\nimport { CATEGORIES } from '../constants'\nimport { getTransformationOptions } from './transformationOptions'\nimport { transformToNested } from './transformToNested'\n\nconst { each, get, has } = lodash\n\nconst transformFromConfigsToResponse = (configs, callback = null, defaultsOnly = false) => {\n\n  const response = {}\n\n  each(configs, (config, key) => {\n    // Set inherited values\n    if (config.inherit) {\n      config.default = get(configs, config.inherit).default\n    }\n    // TODO: Figure out why configs have value properties when a configuration is saved but not published\n    let value = has(config, `value`) && !defaultsOnly ? config.value : config.default\n\n    if (callback) {\n\n      const {\n        key: newKey,\n        value: newValue,\n      } = callback(key, config)\n\n      if (newKey) {\n        key = newKey\n      }\n\n      if (newValue) {\n        value = newValue\n      }\n    }\n\n    response[key] = value\n  })\n\n  return response\n}\n\nconst transformToConfigValues = (configs, opts = {}, defaultsOnly = false) => {\n\n  const options = getTransformationOptions(opts)\n\n  const response = transformFromConfigsToResponse(configs, (key, config) => {\n\n    key = options.categorized ? `${CATEGORIES[config.category].plural}.${key}` : key\n\n    return {\n      key,\n    }\n  }, defaultsOnly)\n\n  if (options.nested) {\n    return transformToNested(response)\n  }\n\n  return response\n}\n\nexport { transformFromConfigsToResponse, transformToConfigValues }\n","import lodash from 'lodash'\n\nconst { differenceWith, each, fromPairs, has, isEqual, pickBy, toPairs } = lodash\n\nconst getDiffByStatus = (object1, object2): object => {\n  const changes = fromPairs(differenceWith(toPairs(object2), toPairs(object1), isEqual)) as object\n\n  const added = pickBy(changes, (value, key) => {\n    return !has(object1, key)\n  })\n\n  const changed = pickBy(changes, (value, key) => {\n    return has(object1, key)\n  })\n\n  const reverseChanges = fromPairs(differenceWith(toPairs(object1), toPairs(object2), isEqual)) as object\n\n  const removed = pickBy(reverseChanges, (value, key) => {\n    return !has(object2, key)\n  })\n\n  return { added: added, changed: changed, removed: removed }\n}\n\nconst getDiff = (object1, object2) => {\n  const diffByStatus = getDiffByStatus(object1, object2)\n\n  const diff = {}\n\n  each(diffByStatus, (value, statusKey) => {\n    each(diffByStatus[statusKey], (value, key) => {\n      diff[key] = {\n        value: value,\n        status: statusKey,\n        previous: has(object1, key) ? object1[key] : null,\n      }\n    })\n  })\n\n  return diff\n}\n\nexport { getDiff, getDiffByStatus }\n","const logMemoryUsage = () => {\n\n  const used = process.memoryUsage()\n\n  let message = `Memory Usage\\n`\n\n  for (let key in used) {\n    message += `${key}: ${Math.round(used[key] / 1024 / 1024 * 100) / 100} MB\\n`\n  }\n\n  console.log(message)\n}\n\nexport { logMemoryUsage }\n\n","import lodash from 'lodash'\n\nimport type {\n  Component,\n  ComponentOptions,\n  Components, Config,\n  ConfigMappings,\n  ConfigObject,\n  Configs,\n  Onboarder,\n  Onboarders,\n  OnboarderTabs,\n  Source,\n  StandardizedConfigs,\n} from '../types'\n\nconst { assign, each, endsWith, get, has, includes, isObject, kebabCase, last, mapKeys, mapValues, merge, set, size, split, startCase, unset } = lodash\n\nexport type SourceConfigs = {\n  getComponents?: () => Promise<Components>,\n  getOverrides?: () => Promise<object>\n  getOnboarders?: () => Promise<Onboarder>,\n  getConfigs?: () => Promise<Configs>,\n  getMappings?: () => Promise<ConfigMappings>,\n  getLabel?: () => string | Promise<string | undefined>,\n  getName?: () => string | Promise<string | undefined>,\n  source?: string\n}\n\n// TODO: HelperFunctions is deprecated\nexport type HelperFunctions = ReturnType<typeof getHelpers>\nexport type Context = ReturnType<typeof getHelpers>\n\nexport type Definitions = {\n  [key: string]: DefinitionComponent\n}\n\n/* eslint-disable no-unused-vars */\nexport type DefinitionComponent = {\n  getConfigs?: (_: HelperFunctions) => Configs\n  getSettings?: (_: HelperFunctions) => Configs\n  getTranslations?: (_: HelperFunctions) => Configs\n  getUI?: (_: HelperFunctions) => Configs,\n  getFeatures?: (_: HelperFunctions) => Configs,\n  getOptions?: () => Component\n}\n\n/* eslint-enable no-unused-vars */\n\nconst getType = (config: ConfigObject) => {\n\n  switch (typeof config.default) {\n  case `boolean`:\n    return `switch`\n  }\n\n  return `input`\n}\n\nconst standardizeConfig = (key: string, config: Config, skipDefaultCheck = false) => {\n\n  if (isObject(config)) {\n    if (!skipDefaultCheck && (!has(config, `default`) && !has(config, `inherit`))) {\n      throw new Error(`Config \"${key}\" is missing a \"default\" value (or \"inherit\" reference).`)\n    }\n  } else {\n    config = {\n      default: config,\n    }\n  }\n\n  return config as ConfigObject\n}\n\nconst parseConfig = (key: string, config: Config, options: Partial<ConfigObject> = {}): ConfigObject => {\n\n  config = standardizeConfig(key, config)\n\n  logWarningsForConfigIfAny(key, config)\n\n  delete config.key\n\n  if (config.docLink) {\n    const docLinkText = `Documentation on this feature can be found <a href=\"${config.docLink}\">here</a>.`\n    config.hint = config.hint ? docLinkText + `<br>${config.hint}` : docLinkText\n    delete config.docLink\n  }\n\n  if (config.inherit) {\n    // TODO: It would be nice to eventually show the value of the config that is being inherited from\n    // as part of the message. (This would involve a DB lookup, so we'll save this for a later time.)\n    const inheritText = `When unchanged, inherits value from <code>${config.inherit}</code>.`\n    config.hint = config.hint ? inheritText + `<br>${config.hint}` : inheritText\n  }\n\n  const defaults = {\n    default: null, // This is placed here so that `default` appears as first property\n    type: getType(config),\n    label: startCase(last(split(key, `.`))),\n    category: `setting`,\n  } as ConfigObject\n\n  return assign(defaults, config, options)\n}\n\nconst logWarningsForConfigIfAny = (key: string, config: ConfigObject) => {\n\n  // This check will help to point out potential configs that should have their inputType set to \"number\"\n  if (!config.inputType && (endsWith(key, `_id`) || endsWith(key, `ID`))) {\n\n    // We can rule out a few cases with a couple of extra checks  \n    if (config.default === `` || config.default === null || !includes([`boolean`, `string`], typeof config.default)) {\n      console.warn(`To remove this warning, set the \"inputType\" on \"${key}\" to \"number\" if its value is meant to be parsed as a number (\"text\" otherwise)`)\n    }\n  }\n}\n\nconst parseConfigs = (\n  configs: Configs,\n  options: Partial<ConfigObject> = {},\n  // eslint-disable-next-line no-unused-vars\n  callback?: (key: string, config: Config) => void,\n) => {\n\n  configs = mapKeys(configs, (config: Config, key: string) => {\n    return get(config, `key`, key)\n  })\n\n  return mapValues(configs, (config: Config, key: string) => {\n\n    callback && callback(key, config)\n\n    return parseConfig(key, config, options)\n  }) as StandardizedConfigs\n}\n\nconst parseUniqueConfigs = (set: Configs, configs: Configs, options: Partial<ConfigObject>) => {\n  return parseConfigs(configs, options, (key) => {\n    if (has(set, key)) {\n      throw new Error(`Duplicate key: \"${key}\"`)\n    }\n  })\n}\n\nconst parseConfigsIntoCollection = (set: Configs, configs: Configs, options: Partial<ComponentOptions>) => {\n  merge(set, parseUniqueConfigs(set, configs, options))\n}\n\nconst getHelpers = (components: Components, component: string, helperType: string = `setting`) => {\n\n  const groupTypes = {\n    group: {\n      path: `groups`,\n    },\n    tab: {\n      path: `tabs`,\n    },\n  }\n\n  const trackedGroups = []\n\n  const walkConfigs = (configs: Configs, callback = null) => {\n\n    const walked = {}\n\n    each(configs, (config, key) => {\n      config = standardizeConfig(key, config)\n      if (callback) {\n        const {\n          config: newConfig,\n          key: newKey,\n        } = callback(key, config)\n        walked[newKey] = newConfig\n      } else {\n        walked[key] = config\n      }\n    })\n\n    return walked\n  }\n\n  const setComponentGroup = (name: string, label: string, configs: Configs, type = `group`) => {\n\n    let path: string = groupTypes[type].path\n    let replacement: ComponentOptions = {}\n\n    each(configs, config => {\n      if (typeof config === `object` && config.group) {\n\n        // TODO: This variable should handle cases where group value is deeply nested\n        const groupExpanded = config.group\n\n        each(groupTypes, groupType => {\n          const group = get(components, [component, groupType.path, groupExpanded])\n          if (group) {\n            set(replacement, [groupType.path, groupExpanded], group)\n            unset(components, [component, groupType.path, groupExpanded])\n\n            const holder = get(components, [component, groupType.path], {})\n            if (size(holder) === 0) {\n              unset(components, [component, groupType.path])\n            }\n          }\n        })\n      }\n    })\n\n    // TODO: Need to think about this more\n    // if (has(components, [component, path, name])) {\n    //   throw new Error(`Duplicate ${type}: \"${name}\"`)\n    // }\n\n    set(components, [component, path, name], assign({\n      label: label,\n    }, replacement))\n  }\n\n  const addNested = (name: string, configs: Configs) => {\n    return walkConfigs(configs, (key: string, config: Config) => {\n\n      if (typeof config === `object`) {\n        if (config.visibleIf) {\n          config.visibleIf = `${name}.${config.visibleIf}`\n        }\n\n        config.longLabel = `${startCase(name)} ⇢ ${config.longLabel ? config.longLabel : (config.label ? config.label : startCase(key))}`\n      }\n\n      return {\n        key: `${name}.${key}`,\n        config,\n      }\n    })\n  }\n\n  const addGroup = (\n    name: string,\n    label: string,\n    configs: Configs,\n    nesting = true,\n    type = `group`,\n    /* eslint-disable-next-line no-unused-vars */\n    callback?: (_: string, _2: Config) => void,\n  ) => {\n\n    // TODO: Eventually store a running list of problems so you can see a count of the issues\n    if (includes(trackedGroups, name)) {\n\n      // TODO: Investigate if this warning is still needed at all. What other parts of the config structure can be validated? \n      // console.warn(`\"${name}\" group already exists in \"${helperType}\"`)\n    } else {\n      trackedGroups.push(name)\n    }\n\n    setComponentGroup(name, label, configs, type)\n\n    return walkConfigs(configs, (key: string, config: ConfigObject) => {\n      config.group = config.group ? `${name}.${config.group}` : name\n\n      if (callback) {\n        callback(key, config)\n      }\n\n      return {\n        key: nesting ? `${name}.${key}` : key,\n        config,\n      }\n    })\n  }\n\n  const addFeature = (name: string, label: string, configs: Configs, enabled: boolean | Config = false, nesting = true) => {\n\n    if (has(configs, `enabled`)) {\n      throw new Error(`Feature \"${name}\" should not contain a property named \"enabled\".`)\n    }\n\n    configs = assign({\n      enabled: standardizeConfig(`enabled`, enabled),\n    }, configs)\n\n    configs = addGroup(name, label, configs, nesting, `group`, (key, config) => {\n      if (key !== `enabled`) {\n        typeof config === `object` && set(config, `visibleIf`, `${name}.enabled`)\n      }\n    })\n\n    return configs as StandardizedConfigs\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  type AddFieldCallbackInnerFuncType = (key: string, config: Config) => void\n  // eslint-disable-next-line no-unused-vars\n  type RemoveFieldCallbackInnerFuncType = (key: string) => void\n  // eslint-disable-next-line no-unused-vars\n  type ModifyLabelCallbackInnerFuncType = (key: string) => void\n\n  const addField = (\n    key: string,\n    // eslint-disable-next-line no-unused-vars\n    callback?: (arg: {\n      insert: AddFieldCallbackInnerFuncType,\n      modify: AddFieldCallbackInnerFuncType,\n      remove: RemoveFieldCallbackInnerFuncType,\n      modifyLabel: ModifyLabelCallbackInnerFuncType,\n    }) => void,\n  ) => {\n\n    let fields: Configs = {}\n\n    const visibleIf = `${key}.isVisible`\n\n    const prettyKey = startCase(key)\n\n    let label = prettyKey\n\n    fields.isVisible = {\n      default: true,\n      label: `Visible`,\n      longLabel: `${prettyKey} ⇢ Visible`,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.required = {\n      default: false,\n      label: `Required`,\n      longLabel: `${prettyKey} ⇢ Required`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.disabled = {\n      default: false,\n      label: `Disabled`,\n      longLabel: `${prettyKey} ⇢ Disabled`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.hasAutoFocus = {\n      default: false,\n      label: `Autofocus`,\n      longLabel: `${prettyKey} ⇢ Autofocus`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-2`,\n    }\n\n    fields.pattern = {\n      default: ``,\n      label: `Pattern`,\n      longLabel: `${prettyKey} ⇢ Pattern`,\n      visibleIf: visibleIf,\n      styleClasses: `col-md-12`,\n    }\n\n    if (callback) {\n\n      const insert: AddFieldCallbackInnerFuncType = (key, config) => {\n\n        if (has(fields, key)) {\n          throw new Error(`Field ${key} already exists!`)\n        }\n\n        const parsedConfig = parseConfig(key, config, {\n          visibleIf: visibleIf,\n          styleClasses: `col-md-12`,\n        })\n\n        parsedConfig.longLabel = `${prettyKey} ⇢ ${parsedConfig.label}`\n\n        fields[key] = parsedConfig\n      }\n\n      const modify: AddFieldCallbackInnerFuncType = (key, config) => {\n        merge(fields[key], standardizeConfig(key, config, true))\n      }\n\n      const remove: RemoveFieldCallbackInnerFuncType = key => {\n        delete fields[key]\n      }\n\n      const modifyLabel: ModifyLabelCallbackInnerFuncType = newLabel => {\n        label = newLabel\n      }\n\n      callback && callback({\n        insert,\n        modify,\n        remove,\n        modifyLabel,\n      })\n    }\n\n    return addGroup(key, label, fields, true)\n  }\n\n  const addTab = (label: string, configs: Configs) => {\n\n    const name = `${helperType}-${kebabCase(label)}`\n\n    return addGroup(name, label, configs, false, `tab`)\n  }\n\n  type Pluralized = {\n    zero: string,\n    one: string,\n    many: string,\n  }\n\n  const addPluralized = (name: string, plurals: Pluralized) => {\n\n    const configs = {}\n\n    if (plurals.zero) {\n      configs[`0`] = {\n        default: plurals.zero,\n        label: `Zero Case`,\n        hint: `When there are 0 items`,\n      }\n    }\n\n    if (plurals.one) {\n      configs[`1`] = {\n        default: plurals.one,\n        label: `One Case`,\n        hint: `When there is 1 item`,\n      }\n    }\n\n    if (plurals.many) {\n      configs[`other`] = {\n        default: plurals.many,\n        label: `Many Case`,\n        hint: `When there are many items`,\n      }\n    }\n\n    if (size(configs)) {\n      return addNested(name, configs)\n    }\n  }\n\n  return {\n    addNested,\n    addFeature,\n    addGroup,\n    addTab,\n    addField,\n    addPluralized,\n  }\n}\n\nconst parseConfigsAndComponents = (definitions: Definitions) => {\n\n  const configs: Configs = {}\n  const components = parseComponents(definitions)\n\n  each(definitions, (component, key) => {\n\n    const helpParseConfigsWithCategory = (getCategoryFunction, category = `setting`) => {\n\n      let options: Partial<ConfigObject> = {\n        component: key,\n      }\n\n      const helpers = getHelpers(components, key, category)\n\n      if (category) {\n        options = assign(options, {\n          category: category,\n        })\n      }\n\n      const theseConfigs = getCategoryFunction(helpers)\n      if (size(theseConfigs)) {\n\n        const categories = get(components, [key, `categories`], [])\n        categories.push(category)\n        set(components, [key, `categories`], categories)\n\n        parseConfigsIntoCollection(configs, theseConfigs, options)\n      }\n    }\n\n    const {\n      getConfigs,\n      getFeatures,\n      getSettings,\n      getTranslations,\n      getUI,\n    } = component\n\n    if (getConfigs) {\n      helpParseConfigsWithCategory(getConfigs)\n    } else {\n\n      if (getSettings) {\n        helpParseConfigsWithCategory(getSettings, `setting`)\n      }\n\n      if (getTranslations) {\n        helpParseConfigsWithCategory(getTranslations, `translation`)\n      }\n\n      if (getUI) {\n        helpParseConfigsWithCategory(getUI, `ui`)\n      }\n\n      if (getFeatures) {\n        helpParseConfigsWithCategory(getFeatures, `feature`)\n      }\n    }\n  })\n\n  return {\n    configs,\n    components,\n  }\n}\n\nconst parseComponent = (key: string, component?: ComponentOptions) => {\n  return assign({\n    label: startCase(last(split(key, `.`))),\n    order: 0,\n    toggleable: false,\n    description: null,\n    rootKey: null,\n  }, component) as ComponentOptions\n}\n\nconst parseComponents = (components: Components) => {\n  return mapValues(components, (component, key: string) => {\n    const { getOptions } = component\n\n    return parseComponent(key, getOptions ? getOptions() : null)\n  }) as Components\n}\n\nconst parseComponentsFromConfigs = (configs: Configs, structure: Components = {}) => {\n\n  // TODO: Place all these types in the \"types\" directory\n  const components: Components = {}\n\n  let hasUnsorted = false\n\n  each(configs, config => {\n    if (typeof config === `object` && has(config, `component`)) {\n      if (!has(components, config.component)) {\n\n        let options = {}\n        if (has(structure, config.component)) {\n          const { getOptions } = structure[config.component]\n          options = getOptions ? getOptions() : structure[config.component]\n        }\n\n        components[config.component] = parseComponent(config.component, options)\n      }\n    } else {\n      hasUnsorted = true\n    }\n  })\n\n  if (hasUnsorted && size(components)) {\n    components.unsorted = parseComponent(`unsorted`, {\n      order: 999,\n    })\n  }\n\n  return components\n}\n\nconst standardizeConfigs = (configs: Configs, sourceConfigs): StandardizedConfigs => {\n\n  const standardizedConfigs = {}\n\n  each(configs, config => {\n\n    if (isObject(config) && !has(config, `key`)) {\n      throw new Error(`Onboarder config missing key!`)\n    }\n\n    const key: any = isObject(config) ? config.key : config\n\n    if (!has(sourceConfigs, key)) {\n      throw new Error(`Onboarder defines key \"${key}\" which does not exist.`)\n    }\n\n    if (isObject(config)) {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key], config)\n    } else {\n      standardizedConfigs[key] = assign({}, sourceConfigs[key])\n    }\n  })\n\n  return standardizedConfigs\n}\n\nconst parseOnboarderTabs = (tabs, configs): OnboarderTabs => {\n\n  const parsedOnboardersTabs = {}\n\n  each(tabs, (tab, name) => {\n\n    parsedOnboardersTabs[name] = {\n      label: tab.label ? tab.label : startCase(name),\n      configs: standardizeConfigs(tab.configs, configs),\n    }\n  })\n\n  return parsedOnboardersTabs\n}\n\nconst parseOnboarders = (onboarders, configs): Onboarders => {\n\n  const parsedOnboarders = {}\n\n  each(onboarders, ({ getLabel, getTabs }, name) => {\n\n    parsedOnboarders[name] = {\n      label: getLabel ? getLabel() : startCase(name),\n      tabs: getTabs ? parseOnboarderTabs(getTabs(), configs) : {},\n    }\n  })\n\n  return parsedOnboarders\n}\n\nconst verifyConfigs = configs => {\n\n  each(configs, (config, key) => {\n\n    // Make sure \"inherit\" value exists as a key if defined\n    if (config.inherit) {\n\n      if (!has(configs, config.inherit)) {\n        throw new Error(`Config with key \"${key}\" has inherit property defined as \"${config.inherit}\" which is not a valid key!`)\n      }\n    }\n  })\n}\n\nconst parseSource = async ({ getComponents, getConfigs, getLabel, getMappings, getName, getOnboarders, getOverrides, source }: SourceConfigs) => {\n\n  const name = getName ? await getName() : source\n  const label = getLabel ? await getLabel() : startCase(name)\n\n  const options: Source = {\n    name,\n    label,\n  }\n\n  const grabComponents = getComponents ? await getComponents() : null\n\n  if (getConfigs) {\n    const configs = parseConfigs(await getConfigs())\n    const components = parseComponentsFromConfigs(configs, grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  } else {\n    let { components, configs } = parseConfigsAndComponents(grabComponents)\n    merge(options, {\n      configs,\n      components,\n    })\n  }\n\n  verifyConfigs(options.configs)\n\n  if (getOnboarders) {\n    options.onboarders = parseOnboarders(await getOnboarders(), options.configs)\n  }\n\n  if (getOverrides) {\n    options.overrides = await getOverrides()\n  }\n\n  if (getMappings) {\n    options.mappings = await getMappings()\n  }\n\n  return options\n}\n\nclass SourceError extends Error {\n\n  constructor(source, error) {\n    super(`${error.message} (\"${source}\" source)`)\n    this.name = `SourceError`\n  }\n}\n\nexport { parseSource, SourceError }\n","import { parseSource, SourceConfigs } from './parseSource'\n\nconst parseSourceConfigs = async (source: string, stack: SourceConfigs) => {\n\n  const parsedSource = await parseSource({\n    source,\n    ...stack,\n  })\n\n  return parsedSource.configs\n}\n\nexport { parseSourceConfigs }\n","import lodash from 'lodash'\n\nconst { each, get, includes, isObject, isUndefined } = lodash\n\nconst validateSources = (sources) => {\n\n  const checkThatSourceHasConfig = (source, key: string, option: string = null) => {\n\n    const config = get(sources, [source, `configs`, key])\n\n    if (option) {\n      if (!includes(config.values, option)) {\n        console.warn(`Mapping Check: ${key} with option \"${option}\" does not exist on ${source}`)\n      }\n    }\n\n    if (isUndefined(config)) {\n      console.warn(`Mapping Check: ${key} does not exist on ${source}`)\n    }\n  }\n\n  each(sources, (source, key) => {\n\n    // Check 1: Verify that mapped keys exist\n    if (source.mappings) {\n      each(source.mappings, (mapping, mapTo) => {\n        each(mapping, (to, from) => {\n          if (isObject(to)) {\n            each(to, (valueTo, valueFrom) => {\n              // Object maps should already be set in \".values\" by the time we run this check here (eg. app/sources/wlw-v3/src/configs/components/order.ts)\n              checkThatSourceHasConfig(key, from, valueFrom)\n              checkThatSourceHasConfig(mapTo, valueTo)\n            })\n          } else {\n            checkThatSourceHasConfig(key, from)\n            checkThatSourceHasConfig(mapTo, to)\n          }\n        })\n      })\n    }\n\n  })\n}\n\nexport { validateSources }\n"],"names":["_CATEGORIES","ConfigCategory","ConfigCategoryPlurals","CATEGORIES","Setting","plural","label","labelPlural","order","Translation","UI","Feature","assign","lodash","mapValues","getTransformationOptions","options","nested","categorized","sort","fromPairs","sortBy","toPairs","object","each","setWith","transformToNested","transformed","value","key","Object","get","transformResponse","response","opts","configs","sortObjectAlphabetically","callback","newKey","_callback","newValue","helpTransformResponse","config","category","console","warn","has","transformFromConfigsToResponse","defaultsOnly","inherit","transformToConfigValues","differenceWith","isEqual","pickBy","getDiffByStatus","object1","object2","changes","added","changed","removed","reverseChanges","diffByStatus","diff","statusKey","status","previous","logMemoryUsage","used","process","memoryUsage","message","Math","round","log","endsWith","includes","isObject","kebabCase","last","mapKeys","merge","set","size","split","startCase","unset","standardizeConfig","skipDefaultCheck","Error","default","parseConfig","logWarningsForConfigIfAny","docLink","hint","docLinkText","inheritText","defaults","type","getType","inputType","parseConfigs","parseComponent","component","toggleable","description","rootKey","standardizeConfigs","sourceConfigs","standardizedConfigs","parseOnboarderTabs","tabs","parsedOnboardersTabs","tab","name","parseSource","_ref2","getComponents","getConfigs","getLabel","getMappings","getName","getOnboarders","getOverrides","source","_temp9","_temp8","grabComponents","mappings","_temp","then","Promise","resolve","overrides","_getOverrides","onboarders","parsedOnboarders","_ref","getTabs","parseOnboarders","_getOnboarders","_temp4","_temp5","_temp6","_getConfigs","components","structure","hasUnsorted","getOptions","unsorted","parseComponentsFromConfigs","definitions","_parseConfigsAndCompo","parseComponents","helpParseConfigsWithCategory","getCategoryFunction","helperType","groupTypes","group","path","trackedGroups","walkConfigs","walked","visibleIf","longLabel","addGroup","nesting","push","replacement","groupType","groupExpanded","holder","setComponentGroup","addNested","addFeature","enabled","addTab","addField","fields","prettyKey","isVisible","styleClasses","required","disabled","hasAutoFocus","pattern","insert","parsedConfig","modify","remove","modifyLabel","newLabel","addPluralized","plurals","zero","one","many","getHelpers","theseConfigs","helpers","categories","parseUniqueConfigs","parseConfigsIntoCollection","getFeatures","getSettings","getTranslations","getUI","_temp7","e","reject","SourceError","error","_this","_Error","call","this","parseSourceConfigs","stack","parsedSource","isUndefined","validateSources","sources","checkThatSourceHasConfig","option","values","mapping","mapTo","to","from","valueTo","valueFrom"],"mappings":"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"}